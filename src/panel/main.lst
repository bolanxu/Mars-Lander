                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ship_mass
                                     12 	.globl _disp
                                     13 	.globl _vel1
                                     14 	.globl _leak1
                                     15 	.globl _turb3
                                     16 	.globl _turb2
                                     17 	.globl _turb1
                                     18 	.globl _engine1
                                     19 	.globl _start1
                                     20 	.globl _lose
                                     21 	.globl _win
                                     22 	.globl _nums
                                     23 	.globl _PCA_isr
                                     24 	.globl _timer1interrupt
                                     25 	.globl _adc_isr
                                     26 	.globl _timer0Interrupt
                                     27 	.globl _main
                                     28 	.globl _init
                                     29 	.globl _printLCD
                                     30 	.globl _InitADC
                                     31 	.globl _PcaInit
                                     32 	.globl _Timer1Init
                                     33 	.globl _Timer0Init
                                     34 	.globl _start
                                     35 	.globl _write_data
                                     36 	.globl _write_com
                                     37 	.globl _display
                                     38 	.globl _delay
                                     39 	.globl _DelaySmalltest
                                     40 	.globl _Delay1ms
                                     41 	.globl _srand
                                     42 	.globl _rand
                                     43 	.globl _CF
                                     44 	.globl _CR
                                     45 	.globl _CCF1
                                     46 	.globl _CCF0
                                     47 	.globl _P4_7
                                     48 	.globl _P4_6
                                     49 	.globl _P4_5
                                     50 	.globl _P4_4
                                     51 	.globl _P4_3
                                     52 	.globl _P4_2
                                     53 	.globl _P4_1
                                     54 	.globl _P4_0
                                     55 	.globl _EADC
                                     56 	.globl _CY
                                     57 	.globl _AC
                                     58 	.globl _F0
                                     59 	.globl _RS1
                                     60 	.globl _RS0
                                     61 	.globl _OV
                                     62 	.globl _FL
                                     63 	.globl _P
                                     64 	.globl _TF2
                                     65 	.globl _EXF2
                                     66 	.globl _RCLK
                                     67 	.globl _TCLK
                                     68 	.globl _EXEN2
                                     69 	.globl _TR2
                                     70 	.globl _C_T2
                                     71 	.globl _CP_RL2
                                     72 	.globl _T2CON_7
                                     73 	.globl _T2CON_6
                                     74 	.globl _T2CON_5
                                     75 	.globl _T2CON_4
                                     76 	.globl _T2CON_3
                                     77 	.globl _T2CON_2
                                     78 	.globl _T2CON_1
                                     79 	.globl _T2CON_0
                                     80 	.globl _PT2
                                     81 	.globl _PS
                                     82 	.globl _PT1
                                     83 	.globl _PX1
                                     84 	.globl _PT0
                                     85 	.globl _PX0
                                     86 	.globl _RD
                                     87 	.globl _WR
                                     88 	.globl _T1
                                     89 	.globl _T0
                                     90 	.globl _INT1
                                     91 	.globl _INT0
                                     92 	.globl _TXD
                                     93 	.globl _RXD
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _SM0
                                    118 	.globl _SM1
                                    119 	.globl _SM2
                                    120 	.globl _REN
                                    121 	.globl _TB8
                                    122 	.globl _RB8
                                    123 	.globl _TI
                                    124 	.globl _RI
                                    125 	.globl _T2EX
                                    126 	.globl _T2
                                    127 	.globl _P1_7
                                    128 	.globl _P1_6
                                    129 	.globl _P1_5
                                    130 	.globl _P1_4
                                    131 	.globl _P1_3
                                    132 	.globl _P1_2
                                    133 	.globl _P1_1
                                    134 	.globl _P1_0
                                    135 	.globl _TF1
                                    136 	.globl _TR1
                                    137 	.globl _TF0
                                    138 	.globl _TR0
                                    139 	.globl _IE1
                                    140 	.globl _IT1
                                    141 	.globl _IE0
                                    142 	.globl _IT0
                                    143 	.globl _P0_7
                                    144 	.globl _P0_6
                                    145 	.globl _P0_5
                                    146 	.globl _P0_4
                                    147 	.globl _P0_3
                                    148 	.globl _P0_2
                                    149 	.globl _P0_1
                                    150 	.globl _P0_0
                                    151 	.globl _PCAPWM1
                                    152 	.globl _PCAPWM0
                                    153 	.globl _CCAP1H
                                    154 	.globl _CCAP1L
                                    155 	.globl _CCAPM1
                                    156 	.globl _CCAP0H
                                    157 	.globl _CCAP0L
                                    158 	.globl _CCAPM0
                                    159 	.globl _CH
                                    160 	.globl _CL
                                    161 	.globl _CMOD
                                    162 	.globl _CCON
                                    163 	.globl _P4
                                    164 	.globl _P4SW
                                    165 	.globl _IPH
                                    166 	.globl _P1ASF
                                    167 	.globl _ADC_LOW2
                                    168 	.globl _ADC_RES
                                    169 	.globl _ADC_CONTR
                                    170 	.globl _AUXR
                                    171 	.globl _P4M1
                                    172 	.globl _P4M0
                                    173 	.globl _P2M1
                                    174 	.globl _P2M0
                                    175 	.globl _P3M1
                                    176 	.globl _P3M0
                                    177 	.globl _P1M1
                                    178 	.globl _P1M0
                                    179 	.globl _P0M1
                                    180 	.globl _P0M0
                                    181 	.globl _B
                                    182 	.globl _A
                                    183 	.globl _ACC
                                    184 	.globl _PSW
                                    185 	.globl _TH2
                                    186 	.globl _TL2
                                    187 	.globl _RCAP2H
                                    188 	.globl _RCAP2L
                                    189 	.globl _T2MOD
                                    190 	.globl _T2CON
                                    191 	.globl _IP
                                    192 	.globl _P3
                                    193 	.globl _IE
                                    194 	.globl _P2
                                    195 	.globl _SBUF
                                    196 	.globl _SCON
                                    197 	.globl _P1
                                    198 	.globl _TH1
                                    199 	.globl _TH0
                                    200 	.globl _TL1
                                    201 	.globl _TL0
                                    202 	.globl _TMOD
                                    203 	.globl _TCON
                                    204 	.globl _PCON
                                    205 	.globl _DPH
                                    206 	.globl _DPL
                                    207 	.globl _SP
                                    208 	.globl _P0
                                    209 	.globl _bit3
                                    210 	.globl _bit2
                                    211 	.globl _bit1
                                    212 	.globl _leakBit
                                    213 	.globl _thrust_time
                                    214 	.globl _delta_h
                                    215 	.globl _a
                                    216 	.globl _delta_t
                                    217 	.globl _delta_d
                                    218 	.globl _delta_v
                                    219 	.globl _fuel
                                    220 	.globl _gravity
                                    221 	.globl _height
                                    222 	.globl _ship_thrust
                                    223 	.globl _thrust
                                    224 	.globl _in_thrust
                                    225 	.globl _velocity
                                    226 	.globl _stormBit
                                    227 	.globl _enginebit
                                    228 	.globl _i
                                    229 	.globl _currentTime
                                    230 	.globl _runtime
                                    231 	.globl _cnt
                                    232 	.globl _value
                                    233 	.globl _w
                                    234 	.globl _rndNum
                                    235 	.globl _digit3_4
                                    236 	.globl _digit3_3
                                    237 	.globl _digit3_2
                                    238 	.globl _digit3_1
                                    239 	.globl _digit2_6
                                    240 	.globl _digit2_5
                                    241 	.globl _digit2_4
                                    242 	.globl _digit2_3
                                    243 	.globl _digit2_2
                                    244 	.globl _digit2_1
                                    245 	.globl _digit1_5
                                    246 	.globl _digit1_4
                                    247 	.globl _digit1_3
                                    248 	.globl _digit1_2
                                    249 	.globl _digit1_1
                                    250 	.globl _digit4
                                    251 	.globl _digit3
                                    252 	.globl _digit2
                                    253 	.globl _digit1
                                    254 	.globl _velTime
                                    255 	.globl _velocityBit
                                    256 ;--------------------------------------------------------
                                    257 ; special function registers
                                    258 ;--------------------------------------------------------
                                    259 	.area RSEG    (ABS,DATA)
      000000                        260 	.org 0x0000
                           000080   261 _P0	=	0x0080
                           000081   262 _SP	=	0x0081
                           000082   263 _DPL	=	0x0082
                           000083   264 _DPH	=	0x0083
                           000087   265 _PCON	=	0x0087
                           000088   266 _TCON	=	0x0088
                           000089   267 _TMOD	=	0x0089
                           00008A   268 _TL0	=	0x008a
                           00008B   269 _TL1	=	0x008b
                           00008C   270 _TH0	=	0x008c
                           00008D   271 _TH1	=	0x008d
                           000090   272 _P1	=	0x0090
                           000098   273 _SCON	=	0x0098
                           000099   274 _SBUF	=	0x0099
                           0000A0   275 _P2	=	0x00a0
                           0000A8   276 _IE	=	0x00a8
                           0000B0   277 _P3	=	0x00b0
                           0000B8   278 _IP	=	0x00b8
                           0000C8   279 _T2CON	=	0x00c8
                           0000C9   280 _T2MOD	=	0x00c9
                           0000CA   281 _RCAP2L	=	0x00ca
                           0000CB   282 _RCAP2H	=	0x00cb
                           0000CC   283 _TL2	=	0x00cc
                           0000CD   284 _TH2	=	0x00cd
                           0000D0   285 _PSW	=	0x00d0
                           0000E0   286 _ACC	=	0x00e0
                           0000E0   287 _A	=	0x00e0
                           0000F0   288 _B	=	0x00f0
                           000094   289 _P0M0	=	0x0094
                           000093   290 _P0M1	=	0x0093
                           000092   291 _P1M0	=	0x0092
                           000091   292 _P1M1	=	0x0091
                           0000B2   293 _P3M0	=	0x00b2
                           0000B1   294 _P3M1	=	0x00b1
                           000096   295 _P2M0	=	0x0096
                           000095   296 _P2M1	=	0x0095
                           0000B4   297 _P4M0	=	0x00b4
                           0000B3   298 _P4M1	=	0x00b3
                           00008E   299 _AUXR	=	0x008e
                           0000BC   300 _ADC_CONTR	=	0x00bc
                           0000BD   301 _ADC_RES	=	0x00bd
                           0000BE   302 _ADC_LOW2	=	0x00be
                           00009D   303 _P1ASF	=	0x009d
                           0000B7   304 _IPH	=	0x00b7
                           0000BB   305 _P4SW	=	0x00bb
                           0000C0   306 _P4	=	0x00c0
                           0000D8   307 _CCON	=	0x00d8
                           0000D9   308 _CMOD	=	0x00d9
                           0000E9   309 _CL	=	0x00e9
                           0000F9   310 _CH	=	0x00f9
                           0000DA   311 _CCAPM0	=	0x00da
                           0000EA   312 _CCAP0L	=	0x00ea
                           0000FA   313 _CCAP0H	=	0x00fa
                           0000DB   314 _CCAPM1	=	0x00db
                           0000EB   315 _CCAP1L	=	0x00eb
                           0000FB   316 _CCAP1H	=	0x00fb
                           0000F2   317 _PCAPWM0	=	0x00f2
                           0000F3   318 _PCAPWM1	=	0x00f3
                                    319 ;--------------------------------------------------------
                                    320 ; special function bits
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           000080   324 _P0_0	=	0x0080
                           000081   325 _P0_1	=	0x0081
                           000082   326 _P0_2	=	0x0082
                           000083   327 _P0_3	=	0x0083
                           000084   328 _P0_4	=	0x0084
                           000085   329 _P0_5	=	0x0085
                           000086   330 _P0_6	=	0x0086
                           000087   331 _P0_7	=	0x0087
                           000088   332 _IT0	=	0x0088
                           000089   333 _IE0	=	0x0089
                           00008A   334 _IT1	=	0x008a
                           00008B   335 _IE1	=	0x008b
                           00008C   336 _TR0	=	0x008c
                           00008D   337 _TF0	=	0x008d
                           00008E   338 _TR1	=	0x008e
                           00008F   339 _TF1	=	0x008f
                           000090   340 _P1_0	=	0x0090
                           000091   341 _P1_1	=	0x0091
                           000092   342 _P1_2	=	0x0092
                           000093   343 _P1_3	=	0x0093
                           000094   344 _P1_4	=	0x0094
                           000095   345 _P1_5	=	0x0095
                           000096   346 _P1_6	=	0x0096
                           000097   347 _P1_7	=	0x0097
                           000090   348 _T2	=	0x0090
                           000091   349 _T2EX	=	0x0091
                           000098   350 _RI	=	0x0098
                           000099   351 _TI	=	0x0099
                           00009A   352 _RB8	=	0x009a
                           00009B   353 _TB8	=	0x009b
                           00009C   354 _REN	=	0x009c
                           00009D   355 _SM2	=	0x009d
                           00009E   356 _SM1	=	0x009e
                           00009F   357 _SM0	=	0x009f
                           0000A0   358 _P2_0	=	0x00a0
                           0000A1   359 _P2_1	=	0x00a1
                           0000A2   360 _P2_2	=	0x00a2
                           0000A3   361 _P2_3	=	0x00a3
                           0000A4   362 _P2_4	=	0x00a4
                           0000A5   363 _P2_5	=	0x00a5
                           0000A6   364 _P2_6	=	0x00a6
                           0000A7   365 _P2_7	=	0x00a7
                           0000A8   366 _EX0	=	0x00a8
                           0000A9   367 _ET0	=	0x00a9
                           0000AA   368 _EX1	=	0x00aa
                           0000AB   369 _ET1	=	0x00ab
                           0000AC   370 _ES	=	0x00ac
                           0000AD   371 _ET2	=	0x00ad
                           0000AF   372 _EA	=	0x00af
                           0000B0   373 _P3_0	=	0x00b0
                           0000B1   374 _P3_1	=	0x00b1
                           0000B2   375 _P3_2	=	0x00b2
                           0000B3   376 _P3_3	=	0x00b3
                           0000B4   377 _P3_4	=	0x00b4
                           0000B5   378 _P3_5	=	0x00b5
                           0000B6   379 _P3_6	=	0x00b6
                           0000B7   380 _P3_7	=	0x00b7
                           0000B0   381 _RXD	=	0x00b0
                           0000B1   382 _TXD	=	0x00b1
                           0000B2   383 _INT0	=	0x00b2
                           0000B3   384 _INT1	=	0x00b3
                           0000B4   385 _T0	=	0x00b4
                           0000B5   386 _T1	=	0x00b5
                           0000B6   387 _WR	=	0x00b6
                           0000B7   388 _RD	=	0x00b7
                           0000B8   389 _PX0	=	0x00b8
                           0000B9   390 _PT0	=	0x00b9
                           0000BA   391 _PX1	=	0x00ba
                           0000BB   392 _PT1	=	0x00bb
                           0000BC   393 _PS	=	0x00bc
                           0000BD   394 _PT2	=	0x00bd
                           0000C8   395 _T2CON_0	=	0x00c8
                           0000C9   396 _T2CON_1	=	0x00c9
                           0000CA   397 _T2CON_2	=	0x00ca
                           0000CB   398 _T2CON_3	=	0x00cb
                           0000CC   399 _T2CON_4	=	0x00cc
                           0000CD   400 _T2CON_5	=	0x00cd
                           0000CE   401 _T2CON_6	=	0x00ce
                           0000CF   402 _T2CON_7	=	0x00cf
                           0000C8   403 _CP_RL2	=	0x00c8
                           0000C9   404 _C_T2	=	0x00c9
                           0000CA   405 _TR2	=	0x00ca
                           0000CB   406 _EXEN2	=	0x00cb
                           0000CC   407 _TCLK	=	0x00cc
                           0000CD   408 _RCLK	=	0x00cd
                           0000CE   409 _EXF2	=	0x00ce
                           0000CF   410 _TF2	=	0x00cf
                           0000D0   411 _P	=	0x00d0
                           0000D1   412 _FL	=	0x00d1
                           0000D2   413 _OV	=	0x00d2
                           0000D3   414 _RS0	=	0x00d3
                           0000D4   415 _RS1	=	0x00d4
                           0000D5   416 _F0	=	0x00d5
                           0000D6   417 _AC	=	0x00d6
                           0000D7   418 _CY	=	0x00d7
                           0000AD   419 _EADC	=	0x00ad
                           0000C0   420 _P4_0	=	0x00c0
                           0000C1   421 _P4_1	=	0x00c1
                           0000C2   422 _P4_2	=	0x00c2
                           0000C3   423 _P4_3	=	0x00c3
                           0000C4   424 _P4_4	=	0x00c4
                           0000C5   425 _P4_5	=	0x00c5
                           0000C6   426 _P4_6	=	0x00c6
                           0000C7   427 _P4_7	=	0x00c7
                           0000D8   428 _CCF0	=	0x00d8
                           0000D9   429 _CCF1	=	0x00d9
                           0000DE   430 _CR	=	0x00de
                           0000DF   431 _CF	=	0x00df
                                    432 ;--------------------------------------------------------
                                    433 ; overlayable register banks
                                    434 ;--------------------------------------------------------
                                    435 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        436 	.ds 8
                                    437 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        438 	.ds 8
                                    439 ;--------------------------------------------------------
                                    440 ; overlayable bit register bank
                                    441 ;--------------------------------------------------------
                                    442 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        443 bits:
      000000                        444 	.ds 1
                           008000   445 	b0 = bits[0]
                           008100   446 	b1 = bits[1]
                           008200   447 	b2 = bits[2]
                           008300   448 	b3 = bits[3]
                           008400   449 	b4 = bits[4]
                           008500   450 	b5 = bits[5]
                           008600   451 	b6 = bits[6]
                           008700   452 	b7 = bits[7]
                                    453 ;--------------------------------------------------------
                                    454 ; internal ram data
                                    455 ;--------------------------------------------------------
                                    456 	.area DSEG    (DATA)
      000000                        457 _velocityBit::
      000000                        458 	.ds 1
      000001                        459 _velTime::
      000001                        460 	.ds 2
      000003                        461 _digit1::
      000003                        462 	.ds 1
      000004                        463 _digit2::
      000004                        464 	.ds 1
      000005                        465 _digit3::
      000005                        466 	.ds 1
      000006                        467 _digit4::
      000006                        468 	.ds 1
      000007                        469 _digit1_1::
      000007                        470 	.ds 1
      000008                        471 _digit1_2::
      000008                        472 	.ds 1
      000009                        473 _digit1_3::
      000009                        474 	.ds 1
      00000A                        475 _digit1_4::
      00000A                        476 	.ds 1
      00000B                        477 _digit1_5::
      00000B                        478 	.ds 1
      00000C                        479 _digit2_1::
      00000C                        480 	.ds 1
      00000D                        481 _digit2_2::
      00000D                        482 	.ds 1
      00000E                        483 _digit2_3::
      00000E                        484 	.ds 1
      00000F                        485 _digit2_4::
      00000F                        486 	.ds 1
      000010                        487 _digit2_5::
      000010                        488 	.ds 1
      000011                        489 _digit2_6::
      000011                        490 	.ds 1
      000012                        491 _digit3_1::
      000012                        492 	.ds 1
      000013                        493 _digit3_2::
      000013                        494 	.ds 1
      000014                        495 _digit3_3::
      000014                        496 	.ds 1
      000015                        497 _digit3_4::
      000015                        498 	.ds 1
      000016                        499 _rndNum::
      000016                        500 	.ds 2
      000018                        501 _w::
      000018                        502 	.ds 1
      000019                        503 _value::
      000019                        504 	.ds 2
      00001B                        505 _cnt::
      00001B                        506 	.ds 2
      00001D                        507 _runtime::
      00001D                        508 	.ds 4
      000021                        509 _currentTime::
      000021                        510 	.ds 4
      000025                        511 _i::
      000025                        512 	.ds 2
      000027                        513 _enginebit::
      000027                        514 	.ds 1
      000028                        515 _stormBit::
      000028                        516 	.ds 1
      000029                        517 _velocity::
      000029                        518 	.ds 4
      00002D                        519 _in_thrust::
      00002D                        520 	.ds 4
      000031                        521 _thrust::
      000031                        522 	.ds 4
      000035                        523 _ship_thrust::
      000035                        524 	.ds 4
      000039                        525 _height::
      000039                        526 	.ds 4
      00003D                        527 _gravity::
      00003D                        528 	.ds 4
      000041                        529 _fuel::
      000041                        530 	.ds 4
      000045                        531 _delta_v::
      000045                        532 	.ds 4
      000049                        533 _delta_d::
      000049                        534 	.ds 4
      00004D                        535 _delta_t::
      00004D                        536 	.ds 4
      000051                        537 _a::
      000051                        538 	.ds 4
      000055                        539 _delta_h::
      000055                        540 	.ds 4
      000059                        541 _thrust_time::
      000059                        542 	.ds 2
                                    543 ;--------------------------------------------------------
                                    544 ; overlayable items in internal ram 
                                    545 ;--------------------------------------------------------
                                    546 	.area	OSEG    (OVR,DATA)
                                    547 	.area	OSEG    (OVR,DATA)
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 ;--------------------------------------------------------
                                    550 ; Stack segment in internal ram 
                                    551 ;--------------------------------------------------------
                                    552 	.area	SSEG
      000000                        553 __start__stack:
      000000                        554 	.ds	1
                                    555 
                                    556 ;--------------------------------------------------------
                                    557 ; indirectly addressable internal ram data
                                    558 ;--------------------------------------------------------
                                    559 	.area ISEG    (DATA)
                                    560 ;--------------------------------------------------------
                                    561 ; absolute internal ram data
                                    562 ;--------------------------------------------------------
                                    563 	.area IABS    (ABS,DATA)
                                    564 	.area IABS    (ABS,DATA)
                                    565 ;--------------------------------------------------------
                                    566 ; bit data
                                    567 ;--------------------------------------------------------
                                    568 	.area BSEG    (BIT)
      000000                        569 _leakBit::
      000000                        570 	.ds 1
      000001                        571 _bit1::
      000001                        572 	.ds 1
      000002                        573 _bit2::
      000002                        574 	.ds 1
      000003                        575 _bit3::
      000003                        576 	.ds 1
                                    577 ;--------------------------------------------------------
                                    578 ; paged external ram data
                                    579 ;--------------------------------------------------------
                                    580 	.area PSEG    (PAG,XDATA)
                                    581 ;--------------------------------------------------------
                                    582 ; external ram data
                                    583 ;--------------------------------------------------------
                                    584 	.area XSEG    (XDATA)
                                    585 ;--------------------------------------------------------
                                    586 ; absolute external ram data
                                    587 ;--------------------------------------------------------
                                    588 	.area XABS    (ABS,XDATA)
                                    589 ;--------------------------------------------------------
                                    590 ; external initialized ram data
                                    591 ;--------------------------------------------------------
                                    592 	.area XISEG   (XDATA)
                                    593 	.area HOME    (CODE)
                                    594 	.area GSINIT0 (CODE)
                                    595 	.area GSINIT1 (CODE)
                                    596 	.area GSINIT2 (CODE)
                                    597 	.area GSINIT3 (CODE)
                                    598 	.area GSINIT4 (CODE)
                                    599 	.area GSINIT5 (CODE)
                                    600 	.area GSINIT  (CODE)
                                    601 	.area GSFINAL (CODE)
                                    602 	.area CSEG    (CODE)
                                    603 ;--------------------------------------------------------
                                    604 ; interrupt vector 
                                    605 ;--------------------------------------------------------
                                    606 	.area HOME    (CODE)
      000000                        607 __interrupt_vect:
      000000 02r00r00         [24]  608 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  609 	reti
      000004                        610 	.ds	7
      00000B 02r06rD2         [24]  611 	ljmp	_timer0Interrupt
      00000E                        612 	.ds	5
      000013 32               [24]  613 	reti
      000014                        614 	.ds	7
      00001B 02r09r7E         [24]  615 	ljmp	_timer1interrupt
      00001E                        616 	.ds	5
      000023 32               [24]  617 	reti
      000024                        618 	.ds	7
      00002B 02r08r7F         [24]  619 	ljmp	_adc_isr
      00002E                        620 	.ds	5
      000033 32               [24]  621 	reti
      000034                        622 	.ds	7
      00003B 02r0FrB3         [24]  623 	ljmp	_PCA_isr
                                    624 ;--------------------------------------------------------
                                    625 ; global & static initialisations
                                    626 ;--------------------------------------------------------
                                    627 	.area HOME    (CODE)
                                    628 	.area GSINIT  (CODE)
                                    629 	.area GSFINAL (CODE)
                                    630 	.area GSINIT  (CODE)
                                    631 	.globl __sdcc_gsinit_startup
                                    632 	.globl __sdcc_program_startup
                                    633 	.globl __start__stack
                                    634 	.globl __mcs51_genXINIT
                                    635 	.globl __mcs51_genXRAMCLEAR
                                    636 	.globl __mcs51_genRAMCLEAR
                                    637 ;	main.c:125: unsigned char velocityBit = 1;
      000000 75*00 01         [24]  638 	mov	_velocityBit,#0x01
                                    639 ;	main.c:127: unsigned int velTime = 0;
      000003 E4               [12]  640 	clr	a
      000004 F5*01            [12]  641 	mov	_velTime,a
      000006 F5*02            [12]  642 	mov	(_velTime + 1),a
                                    643 ;	main.c:155: unsigned int rndNum = 100;
      000008 75*16 64         [24]  644 	mov	_rndNum,#0x64
                                    645 ;	1-genFromRTrack replaced	mov	(_rndNum + 1),#0x00
      00000B F5*17            [12]  646 	mov	(_rndNum + 1),a
                                    647 ;	main.c:157: unsigned char w = 1;
      00000D 75*18 01         [24]  648 	mov	_w,#0x01
                                    649 ;	main.c:161: unsigned int cnt = 0;
      000010 F5*1B            [12]  650 	mov	_cnt,a
      000012 F5*1C            [12]  651 	mov	(_cnt + 1),a
                                    652 ;	main.c:164: unsigned long runtime = 0;
      000014 F5*1D            [12]  653 	mov	_runtime,a
      000016 F5*1E            [12]  654 	mov	(_runtime + 1),a
      000018 F5*1F            [12]  655 	mov	(_runtime + 2),a
      00001A F5*20            [12]  656 	mov	(_runtime + 3),a
                                    657 ;	main.c:171: unsigned char enginebit = 0;
                                    658 ;	1-genFromRTrack replaced	mov	_enginebit,#0x00
      00001C F5*27            [12]  659 	mov	_enginebit,a
                                    660 ;	main.c:172: unsigned char stormBit = 0;
                                    661 ;	1-genFromRTrack replaced	mov	_stormBit,#0x00
      00001E F5*28            [12]  662 	mov	_stormBit,a
                                    663 ;	main.c:178: float velocity = 0.0;
      000020 F5*29            [12]  664 	mov	_velocity,a
      000022 F5*2A            [12]  665 	mov	(_velocity + 1),a
      000024 F5*2B            [12]  666 	mov	(_velocity + 2),a
      000026 F5*2C            [12]  667 	mov	(_velocity + 3),a
                                    668 ;	main.c:179: float in_thrust = 100000.0;
                                    669 ;	1-genFromRTrack replaced	mov	_in_thrust,#0x00
      000028 F5*2D            [12]  670 	mov	_in_thrust,a
      00002A 75*2E 50         [24]  671 	mov	(_in_thrust + 1),#0x50
      00002D 75*2F C3         [24]  672 	mov	(_in_thrust + 2),#0xc3
      000030 75*30 47         [24]  673 	mov	(_in_thrust + 3),#0x47
                                    674 ;	main.c:180: float thrust = 0.0;
      000033 F5*31            [12]  675 	mov	_thrust,a
      000035 F5*32            [12]  676 	mov	(_thrust + 1),a
      000037 F5*33            [12]  677 	mov	(_thrust + 2),a
      000039 F5*34            [12]  678 	mov	(_thrust + 3),a
                                    679 ;	main.c:181: float ship_thrust = 100000.0;
                                    680 ;	1-genFromRTrack replaced	mov	_ship_thrust,#0x00
      00003B F5*35            [12]  681 	mov	_ship_thrust,a
      00003D 75*36 50         [24]  682 	mov	(_ship_thrust + 1),#0x50
      000040 75*37 C3         [24]  683 	mov	(_ship_thrust + 2),#0xc3
      000043 75*38 47         [24]  684 	mov	(_ship_thrust + 3),#0x47
                                    685 ;	main.c:183: float height = 1000.0;
      000046 F5*39            [12]  686 	mov	_height,a
      000048 F5*3A            [12]  687 	mov	(_height + 1),a
      00004A 75*3B 7A         [24]  688 	mov	(_height + 2),#0x7a
      00004D 75*3C 44         [24]  689 	mov	(_height + 3),#0x44
                                    690 ;	main.c:184: float gravity = 3.72;
      000050 75*3D 7B         [24]  691 	mov	_gravity,#0x7b
      000053 75*3E 14         [24]  692 	mov	(_gravity + 1),#0x14
      000056 75*3F 6E         [24]  693 	mov	(_gravity + 2),#0x6e
      000059 75*40 40         [24]  694 	mov	(_gravity + 3),#0x40
                                    695 ;	main.c:185: float fuel = 8.2;
      00005C 75*41 33         [24]  696 	mov	_fuel,#0x33
      00005F 75*42 33         [24]  697 	mov	(_fuel + 1),#0x33
      000062 75*43 03         [24]  698 	mov	(_fuel + 2),#0x03
      000065 75*44 41         [24]  699 	mov	(_fuel + 3),#0x41
                                    700 ;	main.c:186: float delta_v = 0.0;
      000068 F5*45            [12]  701 	mov	_delta_v,a
      00006A F5*46            [12]  702 	mov	(_delta_v + 1),a
      00006C F5*47            [12]  703 	mov	(_delta_v + 2),a
      00006E F5*48            [12]  704 	mov	(_delta_v + 3),a
                                    705 ;	main.c:187: float delta_d = 0.0;
      000070 F5*49            [12]  706 	mov	_delta_d,a
      000072 F5*4A            [12]  707 	mov	(_delta_d + 1),a
      000074 F5*4B            [12]  708 	mov	(_delta_d + 2),a
      000076 F5*4C            [12]  709 	mov	(_delta_d + 3),a
                                    710 ;	main.c:188: float delta_t = 1.0/20.0;
      000078 75*4D CD         [24]  711 	mov	_delta_t,#0xcd
      00007B 75*4E CC         [24]  712 	mov	(_delta_t + 1),#0xcc
      00007E 75*4F 4C         [24]  713 	mov	(_delta_t + 2),#0x4c
      000081 75*50 3D         [24]  714 	mov	(_delta_t + 3),#0x3d
                                    715 ;	main.c:193: unsigned int thrust_time = 0;
      000084 F5*59            [12]  716 	mov	_thrust_time,a
      000086 F5*5A            [12]  717 	mov	(_thrust_time + 1),a
                                    718 ;	main.c:126: __bit leakBit = 0;
                                    719 ;	assignBit
      000088 C2*00            [12]  720 	clr	_leakBit
                                    721 ;	main.c:173: __bit bit1 = 0;
                                    722 ;	assignBit
      00008A C2*01            [12]  723 	clr	_bit1
                                    724 ;	main.c:174: __bit bit2 = 1;
                                    725 ;	assignBit
      00008C D2*02            [12]  726 	setb	_bit2
                                    727 ;	main.c:175: __bit bit3 = 1;
                                    728 ;	assignBit
      00008E D2*03            [12]  729 	setb	_bit3
                                    730 	.area GSFINAL (CODE)
      000000 02r00r3E         [24]  731 	ljmp	__sdcc_program_startup
                                    732 ;--------------------------------------------------------
                                    733 ; Home
                                    734 ;--------------------------------------------------------
                                    735 	.area HOME    (CODE)
                                    736 	.area HOME    (CODE)
      00003E                        737 __sdcc_program_startup:
      00003E 02r02r56         [24]  738 	ljmp	_main
                                    739 ;	return from main will return to caller
                                    740 ;--------------------------------------------------------
                                    741 ; code
                                    742 ;--------------------------------------------------------
                                    743 	.area CSEG    (CODE)
                                    744 ;------------------------------------------------------------
                                    745 ;Allocation info for local variables in function 'Delay1ms'
                                    746 ;------------------------------------------------------------
                                    747 ;i                         Allocated to registers r7 
                                    748 ;j                         Allocated to registers r6 
                                    749 ;------------------------------------------------------------
                                    750 ;	main.c:196: void Delay1ms()		//@11.0592MHz
                                    751 ;	-----------------------------------------
                                    752 ;	 function Delay1ms
                                    753 ;	-----------------------------------------
      000000                        754 _Delay1ms:
                           000007   755 	ar7 = 0x07
                           000006   756 	ar6 = 0x06
                           000005   757 	ar5 = 0x05
                           000004   758 	ar4 = 0x04
                           000003   759 	ar3 = 0x03
                           000002   760 	ar2 = 0x02
                           000001   761 	ar1 = 0x01
                           000000   762 	ar0 = 0x00
                                    763 ;	main.c:199: i = 11;
      000000 7F 0B            [12]  764 	mov	r7,#0x0b
                                    765 ;	main.c:200: j = 190;
      000002 7E BE            [12]  766 	mov	r6,#0xbe
                                    767 ;	main.c:203: while (--j);
      000004                        768 00101$:
      000004 EE               [12]  769 	mov	a,r6
      000005 14               [12]  770 	dec	a
      000006 FD               [12]  771 	mov	r5,a
      000007 FE               [12]  772 	mov	r6,a
      000008 70 FA            [24]  773 	jnz	00101$
                                    774 ;	main.c:204: } while (--i);
      00000A EF               [12]  775 	mov	a,r7
      00000B 14               [12]  776 	dec	a
      00000C FD               [12]  777 	mov	r5,a
      00000D FF               [12]  778 	mov	r7,a
      00000E 70 F4            [24]  779 	jnz	00101$
                                    780 ;	main.c:205: }
      000010 22               [24]  781 	ret
                                    782 ;------------------------------------------------------------
                                    783 ;Allocation info for local variables in function 'DelaySmalltest'
                                    784 ;------------------------------------------------------------
                                    785 ;i                         Allocated to registers r7 
                                    786 ;j                         Allocated to registers r6 
                                    787 ;------------------------------------------------------------
                                    788 ;	main.c:208: void DelaySmalltest()		//@11.0592MHz
                                    789 ;	-----------------------------------------
                                    790 ;	 function DelaySmalltest
                                    791 ;	-----------------------------------------
      000011                        792 _DelaySmalltest:
                                    793 ;	main.c:211: i = 2;
      000011 7F 02            [12]  794 	mov	r7,#0x02
                                    795 ;	main.c:212: j = 4;
      000013 7E 04            [12]  796 	mov	r6,#0x04
                                    797 ;	main.c:215: while (--j);
      000015                        798 00101$:
      000015 EE               [12]  799 	mov	a,r6
      000016 14               [12]  800 	dec	a
      000017 FD               [12]  801 	mov	r5,a
      000018 FE               [12]  802 	mov	r6,a
      000019 70 FA            [24]  803 	jnz	00101$
                                    804 ;	main.c:216: } while (--i);
      00001B EF               [12]  805 	mov	a,r7
      00001C 14               [12]  806 	dec	a
      00001D FD               [12]  807 	mov	r5,a
      00001E FF               [12]  808 	mov	r7,a
      00001F 70 F4            [24]  809 	jnz	00101$
                                    810 ;	main.c:217: }
      000021 22               [24]  811 	ret
                                    812 ;------------------------------------------------------------
                                    813 ;Allocation info for local variables in function 'delay'
                                    814 ;------------------------------------------------------------
                                    815 ;time                      Allocated to registers r6 r7 
                                    816 ;aa                        Allocated to registers r4 r5 
                                    817 ;------------------------------------------------------------
                                    818 ;	main.c:220: void delay(unsigned int time)
                                    819 ;	-----------------------------------------
                                    820 ;	 function delay
                                    821 ;	-----------------------------------------
      000022                        822 _delay:
      000022 AE 82            [24]  823 	mov	r6,dpl
      000024 AF 83            [24]  824 	mov	r7,dph
                                    825 ;	main.c:223: for(aa=0;aa<time+1;aa++)
      000026 0E               [12]  826 	inc	r6
      000027 BE 00 01         [24]  827 	cjne	r6,#0x00,00116$
      00002A 0F               [12]  828 	inc	r7
      00002B                        829 00116$:
      00002B 7C 00            [12]  830 	mov	r4,#0x00
      00002D 7D 00            [12]  831 	mov	r5,#0x00
      00002F                        832 00103$:
      00002F C3               [12]  833 	clr	c
      000030 EC               [12]  834 	mov	a,r4
      000031 9E               [12]  835 	subb	a,r6
      000032 ED               [12]  836 	mov	a,r5
      000033 9F               [12]  837 	subb	a,r7
      000034 50 1A            [24]  838 	jnc	00105$
                                    839 ;	main.c:225: Delay1ms();
      000036 C0 07            [24]  840 	push	ar7
      000038 C0 06            [24]  841 	push	ar6
      00003A C0 05            [24]  842 	push	ar5
      00003C C0 04            [24]  843 	push	ar4
      00003E 12r00r00         [24]  844 	lcall	_Delay1ms
      000041 D0 04            [24]  845 	pop	ar4
      000043 D0 05            [24]  846 	pop	ar5
      000045 D0 06            [24]  847 	pop	ar6
      000047 D0 07            [24]  848 	pop	ar7
                                    849 ;	main.c:223: for(aa=0;aa<time+1;aa++)
      000049 0C               [12]  850 	inc	r4
      00004A BC 00 E2         [24]  851 	cjne	r4,#0x00,00103$
      00004D 0D               [12]  852 	inc	r5
      00004E 80 DF            [24]  853 	sjmp	00103$
      000050                        854 00105$:
                                    855 ;	main.c:227: }
      000050 22               [24]  856 	ret
                                    857 ;------------------------------------------------------------
                                    858 ;Allocation info for local variables in function 'display'
                                    859 ;------------------------------------------------------------
                                    860 ;num                       Allocated to registers r6 r7 
                                    861 ;------------------------------------------------------------
                                    862 ;	main.c:229: void display(unsigned int num)
                                    863 ;	-----------------------------------------
                                    864 ;	 function display
                                    865 ;	-----------------------------------------
      000051                        866 _display:
      000051 AE 82            [24]  867 	mov	r6,dpl
      000053 AF 83            [24]  868 	mov	r7,dph
                                    869 ;	main.c:231: P0 = nums[num];
      000055 EE               [12]  870 	mov	a,r6
      000056 24r00            [12]  871 	add	a,#_nums
      000058 F5 82            [12]  872 	mov	dpl,a
      00005A EF               [12]  873 	mov	a,r7
      00005B 34s00            [12]  874 	addc	a,#(_nums >> 8)
      00005D F5 83            [12]  875 	mov	dph,a
      00005F E4               [12]  876 	clr	a
      000060 93               [24]  877 	movc	a,@a+dptr
      000061 F5 80            [12]  878 	mov	_P0,a
                                    879 ;	main.c:232: }
      000063 22               [24]  880 	ret
                                    881 ;------------------------------------------------------------
                                    882 ;Allocation info for local variables in function 'write_com'
                                    883 ;------------------------------------------------------------
                                    884 ;com                       Allocated to registers r7 
                                    885 ;------------------------------------------------------------
                                    886 ;	main.c:235: void write_com(unsigned char com)
                                    887 ;	-----------------------------------------
                                    888 ;	 function write_com
                                    889 ;	-----------------------------------------
      000064                        890 _write_com:
      000064 AF 82            [24]  891 	mov	r7,dpl
                                    892 ;	main.c:237: lcdrs=0;
                                    893 ;	assignBit
      000066 C2 B7            [12]  894 	clr	_P3_7
                                    895 ;	main.c:238: rw=0;
                                    896 ;	assignBit
      000068 C2 B6            [12]  897 	clr	_P3_6
                                    898 ;	main.c:239: delay(5);
      00006A 90 00 05         [24]  899 	mov	dptr,#0x0005
      00006D C0 07            [24]  900 	push	ar7
      00006F 12r00r22         [24]  901 	lcall	_delay
      000072 D0 07            [24]  902 	pop	ar7
                                    903 ;	main.c:240: P2=com;
      000074 8F A0            [24]  904 	mov	_P2,r7
                                    905 ;	main.c:241: delay(5);
      000076 90 00 05         [24]  906 	mov	dptr,#0x0005
      000079 12r00r22         [24]  907 	lcall	_delay
                                    908 ;	main.c:242: lcden=1;
                                    909 ;	assignBit
      00007C D2 B5            [12]  910 	setb	_P3_5
                                    911 ;	main.c:243: delay(5);
      00007E 90 00 05         [24]  912 	mov	dptr,#0x0005
      000081 12r00r22         [24]  913 	lcall	_delay
                                    914 ;	main.c:244: lcden=0;
                                    915 ;	assignBit
      000084 C2 B5            [12]  916 	clr	_P3_5
                                    917 ;	main.c:245: }
      000086 22               [24]  918 	ret
                                    919 ;------------------------------------------------------------
                                    920 ;Allocation info for local variables in function 'write_data'
                                    921 ;------------------------------------------------------------
                                    922 ;data                      Allocated to registers r7 
                                    923 ;------------------------------------------------------------
                                    924 ;	main.c:247: void write_data(unsigned char data)
                                    925 ;	-----------------------------------------
                                    926 ;	 function write_data
                                    927 ;	-----------------------------------------
      000087                        928 _write_data:
      000087 AF 82            [24]  929 	mov	r7,dpl
                                    930 ;	main.c:249: lcdrs=1;
                                    931 ;	assignBit
      000089 D2 B7            [12]  932 	setb	_P3_7
                                    933 ;	main.c:250: rw=0;
                                    934 ;	assignBit
      00008B C2 B6            [12]  935 	clr	_P3_6
                                    936 ;	main.c:251: delay(5);
      00008D 90 00 05         [24]  937 	mov	dptr,#0x0005
      000090 C0 07            [24]  938 	push	ar7
      000092 12r00r22         [24]  939 	lcall	_delay
      000095 D0 07            [24]  940 	pop	ar7
                                    941 ;	main.c:252: P2=data;
      000097 8F A0            [24]  942 	mov	_P2,r7
                                    943 ;	main.c:253: delay(5);
      000099 90 00 05         [24]  944 	mov	dptr,#0x0005
      00009C 12r00r22         [24]  945 	lcall	_delay
                                    946 ;	main.c:254: lcden=1;
                                    947 ;	assignBit
      00009F D2 B5            [12]  948 	setb	_P3_5
                                    949 ;	main.c:255: delay(5);
      0000A1 90 00 05         [24]  950 	mov	dptr,#0x0005
      0000A4 12r00r22         [24]  951 	lcall	_delay
                                    952 ;	main.c:256: lcden=0;
                                    953 ;	assignBit
      0000A7 C2 B5            [12]  954 	clr	_P3_5
                                    955 ;	main.c:257: }
      0000A9 22               [24]  956 	ret
                                    957 ;------------------------------------------------------------
                                    958 ;Allocation info for local variables in function 'start'
                                    959 ;------------------------------------------------------------
                                    960 ;	main.c:260: void start()
                                    961 ;	-----------------------------------------
                                    962 ;	 function start
                                    963 ;	-----------------------------------------
      0000AA                        964 _start:
                                    965 ;	main.c:263: write_com(0x01);
      0000AA 75 82 01         [24]  966 	mov	dpl,#0x01
      0000AD 12r00r64         [24]  967 	lcall	_write_com
                                    968 ;	main.c:264: for (i=0;i<529;i++)
      0000B0 E4               [12]  969 	clr	a
      0000B1 F5*25            [12]  970 	mov	_i,a
      0000B3 F5*26            [12]  971 	mov	(_i + 1),a
      0000B5                        972 00111$:
                                    973 ;	main.c:266: delay(50);
      0000B5 90 00 32         [24]  974 	mov	dptr,#0x0032
      0000B8 12r00r22         [24]  975 	lcall	_delay
                                    976 ;	main.c:267: if (i%32 == 0)
      0000BB E5*25            [12]  977 	mov	a,_i
      0000BD 54 1F            [12]  978 	anl	a,#0x1f
      0000BF 60 02            [24]  979 	jz	00140$
      0000C1 80 08            [24]  980 	sjmp	00104$
      0000C3                        981 00140$:
                                    982 ;	main.c:270: write_com(0x01);
      0000C3 75 82 01         [24]  983 	mov	dpl,#0x01
      0000C6 12r00r64         [24]  984 	lcall	_write_com
      0000C9 80 0E            [24]  985 	sjmp	00105$
      0000CB                        986 00104$:
                                    987 ;	main.c:274: else if (i%16 == 0)
      0000CB E5*25            [12]  988 	mov	a,_i
      0000CD 54 0F            [12]  989 	anl	a,#0x0f
      0000CF 60 02            [24]  990 	jz	00142$
      0000D1 80 06            [24]  991 	sjmp	00105$
      0000D3                        992 00142$:
                                    993 ;	main.c:276: write_com(0x80+0x40);
      0000D3 75 82 C0         [24]  994 	mov	dpl,#0xc0
      0000D6 12r00r64         [24]  995 	lcall	_write_com
      0000D9                        996 00105$:
                                    997 ;	main.c:279: if (start1[i]=='>')
      0000D9 E5*25            [12]  998 	mov	a,_i
      0000DB 24rC2            [12]  999 	add	a,#_start1
      0000DD F5 82            [12] 1000 	mov	dpl,a
      0000DF E5*26            [12] 1001 	mov	a,(_i + 1)
      0000E1 34s00            [12] 1002 	addc	a,#(_start1 >> 8)
      0000E3 F5 83            [12] 1003 	mov	dph,a
      0000E5 E4               [12] 1004 	clr	a
      0000E6 93               [24] 1005 	movc	a,@a+dptr
      0000E7 FF               [12] 1006 	mov	r7,a
      0000E8 BF 3E 08         [24] 1007 	cjne	r7,#0x3e,00107$
                                   1008 ;	main.c:281: write_com(0x01);
      0000EB 75 82 01         [24] 1009 	mov	dpl,#0x01
      0000EE 12r00r64         [24] 1010 	lcall	_write_com
                                   1011 ;	main.c:282: CR=1;
                                   1012 ;	assignBit
      0000F1 D2 DE            [12] 1013 	setb	_CR
      0000F3                       1014 00107$:
                                   1015 ;	main.c:284: write_data(start1[i]);
      0000F3 E5*25            [12] 1016 	mov	a,_i
      0000F5 24rC2            [12] 1017 	add	a,#_start1
      0000F7 F5 82            [12] 1018 	mov	dpl,a
      0000F9 E5*26            [12] 1019 	mov	a,(_i + 1)
      0000FB 34s00            [12] 1020 	addc	a,#(_start1 >> 8)
      0000FD F5 83            [12] 1021 	mov	dph,a
      0000FF E4               [12] 1022 	clr	a
      000100 93               [24] 1023 	movc	a,@a+dptr
      000101 F5 82            [12] 1024 	mov	dpl,a
      000103 12r00r87         [24] 1025 	lcall	_write_data
                                   1026 ;	main.c:290: if (start1[i]==']')
      000106 E5*25            [12] 1027 	mov	a,_i
      000108 24rC2            [12] 1028 	add	a,#_start1
      00010A F5 82            [12] 1029 	mov	dpl,a
      00010C E5*26            [12] 1030 	mov	a,(_i + 1)
      00010E 34s00            [12] 1031 	addc	a,#(_start1 >> 8)
      000110 F5 83            [12] 1032 	mov	dph,a
      000112 E4               [12] 1033 	clr	a
      000113 93               [24] 1034 	movc	a,@a+dptr
      000114 FF               [12] 1035 	mov	r7,a
      000115 BF 5D 06         [24] 1036 	cjne	r7,#0x5d,00112$
                                   1037 ;	main.c:292: delay(1000);
      000118 90 03 E8         [24] 1038 	mov	dptr,#0x03e8
      00011B 12r00r22         [24] 1039 	lcall	_delay
      00011E                       1040 00112$:
                                   1041 ;	main.c:264: for (i=0;i<529;i++)
      00011E 05*25            [12] 1042 	inc	_i
      000120 E4               [12] 1043 	clr	a
      000121 B5*25 02         [24] 1044 	cjne	a,_i,00147$
      000124 05*26            [12] 1045 	inc	(_i + 1)
      000126                       1046 00147$:
      000126 C3               [12] 1047 	clr	c
      000127 E5*25            [12] 1048 	mov	a,_i
      000129 94 11            [12] 1049 	subb	a,#0x11
      00012B E5*26            [12] 1050 	mov	a,(_i + 1)
      00012D 94 02            [12] 1051 	subb	a,#0x02
      00012F 50 03            [24] 1052 	jnc	00148$
      000131 02r00rB5         [24] 1053 	ljmp	00111$
      000134                       1054 00148$:
                                   1055 ;	main.c:295: delay(2000);
      000134 90 07 D0         [24] 1056 	mov	dptr,#0x07d0
      000137 12r00r22         [24] 1057 	lcall	_delay
                                   1058 ;	main.c:296: write_com(0x01);
      00013A 75 82 01         [24] 1059 	mov	dpl,#0x01
      00013D 12r00r64         [24] 1060 	lcall	_write_com
                                   1061 ;	main.c:298: i=0;
      000140 E4               [12] 1062 	clr	a
      000141 F5*25            [12] 1063 	mov	_i,a
      000143 F5*26            [12] 1064 	mov	(_i + 1),a
                                   1065 ;	main.c:299: }
      000145 22               [24] 1066 	ret
                                   1067 ;------------------------------------------------------------
                                   1068 ;Allocation info for local variables in function 'Timer0Init'
                                   1069 ;------------------------------------------------------------
                                   1070 ;	main.c:302: void Timer0Init(void)		//20ms@11.0592MHz
                                   1071 ;	-----------------------------------------
                                   1072 ;	 function Timer0Init
                                   1073 ;	-----------------------------------------
      000146                       1074 _Timer0Init:
                                   1075 ;	main.c:304: AUXR = 0x00;		//Timer clock is 12T mode
      000146 75 8E 00         [24] 1076 	mov	_AUXR,#0x00
                                   1077 ;	main.c:306: TL0 = 0x00;		//Initial timer value
      000149 75 8A 00         [24] 1078 	mov	_TL0,#0x00
                                   1079 ;	main.c:307: TH0 = 0x00;
      00014C 75 8C 00         [24] 1080 	mov	_TH0,#0x00
                                   1081 ;	main.c:308: TF0 = 0;		//Clear TF0 flag
                                   1082 ;	assignBit
      00014F C2 8D            [12] 1083 	clr	_TF0
                                   1084 ;	main.c:310: ET0 = 1;
                                   1085 ;	assignBit
      000151 D2 A9            [12] 1086 	setb	_ET0
                                   1087 ;	main.c:311: EA = 1;
                                   1088 ;	assignBit
      000153 D2 AF            [12] 1089 	setb	_EA
                                   1090 ;	main.c:312: }
      000155 22               [24] 1091 	ret
                                   1092 ;------------------------------------------------------------
                                   1093 ;Allocation info for local variables in function 'Timer1Init'
                                   1094 ;------------------------------------------------------------
                                   1095 ;	main.c:314: void Timer1Init(void)		//50ms@11.0592MHz
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function Timer1Init
                                   1098 ;	-----------------------------------------
      000156                       1099 _Timer1Init:
                                   1100 ;	main.c:317: TMOD = 0b00010001;		//Set timer work mode
      000156 75 89 11         [24] 1101 	mov	_TMOD,#0x11
                                   1102 ;	main.c:318: TL1 = 0x00;		//Initial timer value
      000159 75 8B 00         [24] 1103 	mov	_TL1,#0x00
                                   1104 ;	main.c:319: TH1 = 0x4C;		//Initial timer value
      00015C 75 8D 4C         [24] 1105 	mov	_TH1,#0x4c
                                   1106 ;	main.c:320: TF1 = 0;		//Clear TF1 flag
                                   1107 ;	assignBit
      00015F C2 8F            [12] 1108 	clr	_TF1
                                   1109 ;	main.c:322: ET1 = 1;
                                   1110 ;	assignBit
      000161 D2 AB            [12] 1111 	setb	_ET1
                                   1112 ;	main.c:323: PT1= 1;
                                   1113 ;	assignBit
      000163 D2 BB            [12] 1114 	setb	_PT1
                                   1115 ;	main.c:324: IPH = 0x08;
      000165 75 B7 08         [24] 1116 	mov	_IPH,#0x08
                                   1117 ;	main.c:325: }
      000168 22               [24] 1118 	ret
                                   1119 ;------------------------------------------------------------
                                   1120 ;Allocation info for local variables in function 'PcaInit'
                                   1121 ;------------------------------------------------------------
                                   1122 ;	main.c:328: void PcaInit(void)
                                   1123 ;	-----------------------------------------
                                   1124 ;	 function PcaInit
                                   1125 ;	-----------------------------------------
      000169                       1126 _PcaInit:
                                   1127 ;	main.c:330: CCON = 0;                       //Initial PCA control register
      000169 75 D8 00         [24] 1128 	mov	_CCON,#0x00
                                   1129 ;	main.c:334: CL = 0x00;                        //Reset PCA base timer
      00016C 75 E9 00         [24] 1130 	mov	_CL,#0x00
                                   1131 ;	main.c:335: CH = 0x00;
      00016F 75 F9 00         [24] 1132 	mov	_CH,#0x00
                                   1133 ;	main.c:336: CMOD = 0x00;                    //Set PCA timer clock source as Fosc/12
      000172 75 D9 00         [24] 1134 	mov	_CMOD,#0x00
                                   1135 ;	main.c:339: CCAP0L = value;
      000175 75 EA 99         [24] 1136 	mov	_CCAP0L,#0x99
                                   1137 ;	main.c:340: CCAP0H = value >> 8;            //Initial PCA module-0
      000178 75 FA 03         [24] 1138 	mov	_CCAP0H,#0x03
                                   1139 ;	main.c:341: value += T100Hz;
      00017B 75*19 32         [24] 1140 	mov	_value,#0x32
      00017E 75*1A 07         [24] 1141 	mov	(_value + 1),#0x07
                                   1142 ;	main.c:342: CCAPM0 = 0x49;                  //PCA module-0 work in 16-bit timer mode and enable PCA interrupt
      000181 75 DA 49         [24] 1143 	mov	_CCAPM0,#0x49
                                   1144 ;	main.c:345: EA = 1;
                                   1145 ;	assignBit
      000184 D2 AF            [12] 1146 	setb	_EA
                                   1147 ;	main.c:347: }
      000186 22               [24] 1148 	ret
                                   1149 ;------------------------------------------------------------
                                   1150 ;Allocation info for local variables in function 'InitADC'
                                   1151 ;------------------------------------------------------------
                                   1152 ;	main.c:350: void InitADC( )
                                   1153 ;	-----------------------------------------
                                   1154 ;	 function InitADC
                                   1155 ;	-----------------------------------------
      000187                       1156 _InitADC:
                                   1157 ;	main.c:352: P1ASF = 0b00000001; 
      000187 75 9D 01         [24] 1158 	mov	_P1ASF,#0x01
                                   1159 ;	main.c:353: ADC_RES = 0; //Clear previous result
      00018A 75 BD 00         [24] 1160 	mov	_ADC_RES,#0x00
                                   1161 ;	main.c:354: ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ADC_START | 0;
      00018D 75 BC 88         [24] 1162 	mov	_ADC_CONTR,#0x88
                                   1163 ;	main.c:355: EADC = 1;
                                   1164 ;	assignBit
      000190 D2 AD            [12] 1165 	setb	_EADC
                                   1166 ;	main.c:356: delay(2); //ADC power-on delay and Start A/D conversion
      000192 90 00 02         [24] 1167 	mov	dptr,#0x0002
                                   1168 ;	main.c:357: }
      000195 02r00r22         [24] 1169 	ljmp	_delay
                                   1170 ;------------------------------------------------------------
                                   1171 ;Allocation info for local variables in function 'printLCD'
                                   1172 ;------------------------------------------------------------
                                   1173 ;ptr_stringPointer_u8      Allocated to registers r5 r6 r7 
                                   1174 ;charNum                   Allocated to registers r3 r4 
                                   1175 ;------------------------------------------------------------
                                   1176 ;	main.c:360: void printLCD(char *ptr_stringPointer_u8)
                                   1177 ;	-----------------------------------------
                                   1178 ;	 function printLCD
                                   1179 ;	-----------------------------------------
      000198                       1180 _printLCD:
      000198 AD 82            [24] 1181 	mov	r5,dpl
      00019A AE 83            [24] 1182 	mov	r6,dph
      00019C AF F0            [24] 1183 	mov	r7,b
                                   1184 ;	main.c:363: write_com(0x01);
      00019E 75 82 01         [24] 1185 	mov	dpl,#0x01
      0001A1 C0 07            [24] 1186 	push	ar7
      0001A3 C0 06            [24] 1187 	push	ar6
      0001A5 C0 05            [24] 1188 	push	ar5
      0001A7 12r00r64         [24] 1189 	lcall	_write_com
      0001AA D0 05            [24] 1190 	pop	ar5
      0001AC D0 06            [24] 1191 	pop	ar6
      0001AE D0 07            [24] 1192 	pop	ar7
                                   1193 ;	main.c:364: while((*ptr_stringPointer_u8)!=0)
      0001B0 7B 00            [12] 1194 	mov	r3,#0x00
      0001B2 7C 00            [12] 1195 	mov	r4,#0x00
      0001B4                       1196 00106$:
      0001B4 8D 82            [24] 1197 	mov	dpl,r5
      0001B6 8E 83            [24] 1198 	mov	dph,r6
      0001B8 8F F0            [24] 1199 	mov	b,r7
      0001BA 12r00r00         [24] 1200 	lcall	__gptrget
      0001BD 70 01            [24] 1201 	jnz	00128$
      0001BF 22               [24] 1202 	ret
      0001C0                       1203 00128$:
                                   1204 ;	main.c:366: charNum++;
      0001C0 0B               [12] 1205 	inc	r3
      0001C1 BB 00 01         [24] 1206 	cjne	r3,#0x00,00129$
      0001C4 0C               [12] 1207 	inc	r4
      0001C5                       1208 00129$:
                                   1209 ;	main.c:367: if (charNum % 32 == 0)
      0001C5 EB               [12] 1210 	mov	a,r3
      0001C6 54 1F            [12] 1211 	anl	a,#0x1f
      0001C8 70 1C            [24] 1212 	jnz	00104$
                                   1213 ;	main.c:369: write_com(0x01);
      0001CA 75 82 01         [24] 1214 	mov	dpl,#0x01
      0001CD C0 07            [24] 1215 	push	ar7
      0001CF C0 06            [24] 1216 	push	ar6
      0001D1 C0 05            [24] 1217 	push	ar5
      0001D3 C0 04            [24] 1218 	push	ar4
      0001D5 C0 03            [24] 1219 	push	ar3
      0001D7 12r00r64         [24] 1220 	lcall	_write_com
      0001DA D0 03            [24] 1221 	pop	ar3
      0001DC D0 04            [24] 1222 	pop	ar4
      0001DE D0 05            [24] 1223 	pop	ar5
      0001E0 D0 06            [24] 1224 	pop	ar6
      0001E2 D0 07            [24] 1225 	pop	ar7
      0001E4 80 1F            [24] 1226 	sjmp	00105$
      0001E6                       1227 00104$:
                                   1228 ;	main.c:371: else if (charNum % 16 == 0)
      0001E6 EB               [12] 1229 	mov	a,r3
      0001E7 54 0F            [12] 1230 	anl	a,#0x0f
      0001E9 70 1A            [24] 1231 	jnz	00105$
                                   1232 ;	main.c:373: write_com(0xc0);
      0001EB 75 82 C0         [24] 1233 	mov	dpl,#0xc0
      0001EE C0 07            [24] 1234 	push	ar7
      0001F0 C0 06            [24] 1235 	push	ar6
      0001F2 C0 05            [24] 1236 	push	ar5
      0001F4 C0 04            [24] 1237 	push	ar4
      0001F6 C0 03            [24] 1238 	push	ar3
      0001F8 12r00r64         [24] 1239 	lcall	_write_com
      0001FB D0 03            [24] 1240 	pop	ar3
      0001FD D0 04            [24] 1241 	pop	ar4
      0001FF D0 05            [24] 1242 	pop	ar5
      000201 D0 06            [24] 1243 	pop	ar6
      000203 D0 07            [24] 1244 	pop	ar7
      000205                       1245 00105$:
                                   1246 ;	main.c:375: write_data(*ptr_stringPointer_u8++); // Loop through the string and display char by char
      000205 8D 82            [24] 1247 	mov	dpl,r5
      000207 8E 83            [24] 1248 	mov	dph,r6
      000209 8F F0            [24] 1249 	mov	b,r7
      00020B 12r00r00         [24] 1250 	lcall	__gptrget
      00020E FA               [12] 1251 	mov	r2,a
      00020F A3               [24] 1252 	inc	dptr
      000210 AD 82            [24] 1253 	mov	r5,dpl
      000212 AE 83            [24] 1254 	mov	r6,dph
      000214 8A 82            [24] 1255 	mov	dpl,r2
      000216 C0 07            [24] 1256 	push	ar7
      000218 C0 06            [24] 1257 	push	ar6
      00021A C0 05            [24] 1258 	push	ar5
      00021C C0 04            [24] 1259 	push	ar4
      00021E C0 03            [24] 1260 	push	ar3
      000220 12r00r87         [24] 1261 	lcall	_write_data
                                   1262 ;	main.c:376: delay(20);
      000223 90 00 14         [24] 1263 	mov	dptr,#0x0014
      000226 12r00r22         [24] 1264 	lcall	_delay
      000229 D0 03            [24] 1265 	pop	ar3
      00022B D0 04            [24] 1266 	pop	ar4
      00022D D0 05            [24] 1267 	pop	ar5
      00022F D0 06            [24] 1268 	pop	ar6
      000231 D0 07            [24] 1269 	pop	ar7
                                   1270 ;	main.c:378: }
      000233 02r01rB4         [24] 1271 	ljmp	00106$
                                   1272 ;------------------------------------------------------------
                                   1273 ;Allocation info for local variables in function 'init'
                                   1274 ;------------------------------------------------------------
                                   1275 ;	main.c:380: void init()
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function init
                                   1278 ;	-----------------------------------------
      000236                       1279 _init:
                                   1280 ;	main.c:382: lcden=0; //使能端为低电平
                                   1281 ;	assignBit
      000236 C2 B5            [12] 1282 	clr	_P3_5
                                   1283 ;	main.c:383: write_com(0x38);
      000238 75 82 38         [24] 1284 	mov	dpl,#0x38
      00023B 12r00r64         [24] 1285 	lcall	_write_com
                                   1286 ;	main.c:385: write_com(0x0F);
      00023E 75 82 0F         [24] 1287 	mov	dpl,#0x0f
      000241 12r00r64         [24] 1288 	lcall	_write_com
                                   1289 ;	main.c:390: write_com(0x06);//地址指针自动+1且光标+1，写字符屏幕不会移动
      000244 75 82 06         [24] 1290 	mov	dpl,#0x06
      000247 12r00r64         [24] 1291 	lcall	_write_com
                                   1292 ;	main.c:391: write_com(0X01);
      00024A 75 82 01         [24] 1293 	mov	dpl,#0x01
      00024D 12r00r64         [24] 1294 	lcall	_write_com
                                   1295 ;	main.c:392: write_com(0X80); 
      000250 75 82 80         [24] 1296 	mov	dpl,#0x80
                                   1297 ;	main.c:393: }
      000253 02r00r64         [24] 1298 	ljmp	_write_com
                                   1299 ;------------------------------------------------------------
                                   1300 ;Allocation info for local variables in function 'main'
                                   1301 ;------------------------------------------------------------
                                   1302 ;	main.c:395: void main()
                                   1303 ;	-----------------------------------------
                                   1304 ;	 function main
                                   1305 ;	-----------------------------------------
      000256                       1306 _main:
                                   1307 ;	main.c:398: P4SW = 0x70;
      000256 75 BB 70         [24] 1308 	mov	_P4SW,#0x70
                                   1309 ;	main.c:399: P4_6 = 1;
                                   1310 ;	assignBit
      000259 D2 C6            [12] 1311 	setb	_P4_6
                                   1312 ;	main.c:400: P0 = 0x00;
      00025B 75 80 00         [24] 1313 	mov	_P0,#0x00
                                   1314 ;	main.c:401: init(); 
      00025E 12r02r36         [24] 1315 	lcall	_init
                                   1316 ;	main.c:403: printLCD("hello");
      000261 90r06r57         [24] 1317 	mov	dptr,#___str_0
      000264 75 F0 80         [24] 1318 	mov	b,#0x80
      000267 12r01r98         [24] 1319 	lcall	_printLCD
                                   1320 ;	main.c:404: write_com(0xc0);
      00026A 75 82 C0         [24] 1321 	mov	dpl,#0xc0
      00026D 12r00r64         [24] 1322 	lcall	_write_com
                                   1323 ;	main.c:405: printLCD("byebye");
      000270 90r06r5D         [24] 1324 	mov	dptr,#___str_1
      000273 75 F0 80         [24] 1325 	mov	b,#0x80
      000276 12r01r98         [24] 1326 	lcall	_printLCD
                                   1327 ;	main.c:406: write_com(0x01);
      000279 75 82 01         [24] 1328 	mov	dpl,#0x01
      00027C 12r00r64         [24] 1329 	lcall	_write_com
                                   1330 ;	main.c:408: P0M0 = 0xFF;
      00027F 75 94 FF         [24] 1331 	mov	_P0M0,#0xff
                                   1332 ;	main.c:409: P0M1 = 0x00;
      000282 75 93 00         [24] 1333 	mov	_P0M1,#0x00
                                   1334 ;	main.c:410: P2M0 = 0xFF;
      000285 75 96 FF         [24] 1335 	mov	_P2M0,#0xff
                                   1336 ;	main.c:411: P2M1 = 0x00;
      000288 75 95 00         [24] 1337 	mov	_P2M1,#0x00
                                   1338 ;	main.c:412: P3M0 = 0b11100000;
      00028B 75 B2 E0         [24] 1339 	mov	_P3M0,#0xe0
                                   1340 ;	main.c:413: P3M1 = 0x00;
      00028E 75 B1 00         [24] 1341 	mov	_P3M1,#0x00
                                   1342 ;	main.c:414: P4M0 = 0b01000000;
      000291 75 B4 40         [24] 1343 	mov	_P4M0,#0x40
                                   1344 ;	main.c:415: P4M1 = 0b00100000;
      000294 75 B3 20         [24] 1345 	mov	_P4M1,#0x20
                                   1346 ;	main.c:416: P4_4 = 0;
                                   1347 ;	assignBit
      000297 C2 C4            [12] 1348 	clr	_P4_4
                                   1349 ;	main.c:417: P4_6=0;
                                   1350 ;	assignBit
      000299 C2 C6            [12] 1351 	clr	_P4_6
                                   1352 ;	main.c:420: P0 = 0xff;
      00029B 75 80 FF         [24] 1353 	mov	_P0,#0xff
                                   1354 ;	main.c:421: while(P4_5==0)
      00029E                       1355 00101$:
      00029E 20 C5 06         [24] 1356 	jb	_P4_5,00103$
                                   1357 ;	main.c:423: trigger = 1;
                                   1358 ;	assignBit
      0002A1 D2 C4            [12] 1359 	setb	_P4_4
                                   1360 ;	main.c:424: trigger = 0;
                                   1361 ;	assignBit
      0002A3 C2 C4            [12] 1362 	clr	_P4_4
      0002A5 80 F7            [24] 1363 	sjmp	00101$
      0002A7                       1364 00103$:
                                   1365 ;	main.c:427: for (i=0;i<18;i++)
      0002A7 E4               [12] 1366 	clr	a
      0002A8 F5*25            [12] 1367 	mov	_i,a
      0002AA F5*26            [12] 1368 	mov	(_i + 1),a
      0002AC                       1369 00161$:
                                   1370 ;	main.c:429: trigger = 1;
                                   1371 ;	assignBit
      0002AC D2 C4            [12] 1372 	setb	_P4_4
                                   1373 ;	main.c:430: delay(50);
      0002AE 90 00 32         [24] 1374 	mov	dptr,#0x0032
      0002B1 12r00r22         [24] 1375 	lcall	_delay
                                   1376 ;	main.c:431: trigger = 0;
                                   1377 ;	assignBit
      0002B4 C2 C4            [12] 1378 	clr	_P4_4
                                   1379 ;	main.c:432: delay(50);
      0002B6 90 00 32         [24] 1380 	mov	dptr,#0x0032
      0002B9 12r00r22         [24] 1381 	lcall	_delay
                                   1382 ;	main.c:427: for (i=0;i<18;i++)
      0002BC 05*25            [12] 1383 	inc	_i
      0002BE E4               [12] 1384 	clr	a
      0002BF B5*25 02         [24] 1385 	cjne	a,_i,00290$
      0002C2 05*26            [12] 1386 	inc	(_i + 1)
      0002C4                       1387 00290$:
      0002C4 C3               [12] 1388 	clr	c
      0002C5 E5*25            [12] 1389 	mov	a,_i
      0002C7 94 12            [12] 1390 	subb	a,#0x12
      0002C9 E5*26            [12] 1391 	mov	a,(_i + 1)
      0002CB 94 00            [12] 1392 	subb	a,#0x00
      0002CD 40 DD            [24] 1393 	jc	00161$
                                   1394 ;	main.c:434: delay(500);
      0002CF 90 01 F4         [24] 1395 	mov	dptr,#0x01f4
      0002D2 12r00r22         [24] 1396 	lcall	_delay
                                   1397 ;	main.c:435: P0 = 0x00;
      0002D5 75 80 00         [24] 1398 	mov	_P0,#0x00
                                   1399 ;	main.c:436: while(P4_5==0)
      0002D8                       1400 00105$:
      0002D8 20 C5 06         [24] 1401 	jb	_P4_5,00107$
                                   1402 ;	main.c:438: trigger = 1;
                                   1403 ;	assignBit
      0002DB D2 C4            [12] 1404 	setb	_P4_4
                                   1405 ;	main.c:439: trigger = 0;
                                   1406 ;	assignBit
      0002DD C2 C4            [12] 1407 	clr	_P4_4
      0002DF 80 F7            [24] 1408 	sjmp	00105$
      0002E1                       1409 00107$:
                                   1410 ;	main.c:444: Timer0Init();
      0002E1 12r01r46         [24] 1411 	lcall	_Timer0Init
                                   1412 ;	main.c:445: Timer1Init();
      0002E4 12r01r56         [24] 1413 	lcall	_Timer1Init
                                   1414 ;	main.c:449: PcaInit();
      0002E7 12r01r69         [24] 1415 	lcall	_PcaInit
                                   1416 ;	main.c:453: P0M0 = 0xFF;
      0002EA 75 94 FF         [24] 1417 	mov	_P0M0,#0xff
                                   1418 ;	main.c:454: P0M1 = 0x00;
      0002ED 75 93 00         [24] 1419 	mov	_P0M1,#0x00
                                   1420 ;	main.c:455: P4M0 = 0b01000000;
      0002F0 75 B4 40         [24] 1421 	mov	_P4M0,#0x40
                                   1422 ;	main.c:456: P4M1 = 0x00;
      0002F3 75 B3 00         [24] 1423 	mov	_P4M1,#0x00
                                   1424 ;	main.c:457: P4_4 = 0;
                                   1425 ;	assignBit
      0002F6 C2 C4            [12] 1426 	clr	_P4_4
                                   1427 ;	main.c:460: start();
      0002F8 12r00rAA         [24] 1428 	lcall	_start
                                   1429 ;	main.c:464: TR0 = 1;
                                   1430 ;	assignBit
      0002FB D2 8C            [12] 1431 	setb	_TR0
                                   1432 ;	main.c:465: TR1 = 1;
                                   1433 ;	assignBit
      0002FD D2 8E            [12] 1434 	setb	_TR1
                                   1435 ;	main.c:467: InitADC();
      0002FF 12r01r87         [24] 1436 	lcall	_InitADC
                                   1437 ;	main.c:468: srand((ADC_RES+10)*10);
      000302 AE BD            [24] 1438 	mov	r6,_ADC_RES
      000304 7F 00            [12] 1439 	mov	r7,#0x00
      000306 74 0A            [12] 1440 	mov	a,#0x0a
      000308 2E               [12] 1441 	add	a,r6
      000309 F5*00            [12] 1442 	mov	__mulint_PARM_2,a
      00030B E4               [12] 1443 	clr	a
      00030C 3F               [12] 1444 	addc	a,r7
      00030D F5*01            [12] 1445 	mov	(__mulint_PARM_2 + 1),a
      00030F 90 00 0A         [24] 1446 	mov	dptr,#0x000a
      000312 12r00r00         [24] 1447 	lcall	__mulint
      000315 12r00r00         [24] 1448 	lcall	_srand
                                   1449 ;	main.c:469: rndNum = 10;
      000318 75*16 0A         [24] 1450 	mov	_rndNum,#0x0a
      00031B 75*17 00         [24] 1451 	mov	(_rndNum + 1),#0x00
                                   1452 ;	main.c:470: while (1)
      00031E                       1453 00159$:
                                   1454 ;	main.c:475: if ((runtime % 2 == 0)&&(runtime > 20000))
      00031E E5*1D            [12] 1455 	mov	a,_runtime
      000320 20 E0 1A         [24] 1456 	jb	acc.0,00109$
      000323 C3               [12] 1457 	clr	c
      000324 74 20            [12] 1458 	mov	a,#0x20
      000326 95*1D            [12] 1459 	subb	a,_runtime
      000328 74 4E            [12] 1460 	mov	a,#0x4e
      00032A 95*1E            [12] 1461 	subb	a,(_runtime + 1)
      00032C E4               [12] 1462 	clr	a
      00032D 95*1F            [12] 1463 	subb	a,(_runtime + 2)
      00032F E4               [12] 1464 	clr	a
      000330 95*20            [12] 1465 	subb	a,(_runtime + 3)
      000332 50 09            [24] 1466 	jnc	00109$
                                   1467 ;	main.c:476: rndNum = rand();
      000334 12r00r00         [24] 1468 	lcall	_rand
      000337 85 82*16         [24] 1469 	mov	_rndNum,dpl
      00033A 85 83*17         [24] 1470 	mov	(_rndNum + 1),dph
      00033D                       1471 00109$:
                                   1472 ;	main.c:478: runtime++;
      00033D 05*1D            [12] 1473 	inc	_runtime
      00033F E4               [12] 1474 	clr	a
      000340 B5*1D 0C         [24] 1475 	cjne	a,_runtime,00295$
      000343 05*1E            [12] 1476 	inc	(_runtime + 1)
      000345 B5*1E 07         [24] 1477 	cjne	a,(_runtime + 1),00295$
      000348 05*1F            [12] 1478 	inc	(_runtime + 2)
      00034A B5*1F 02         [24] 1479 	cjne	a,(_runtime + 2),00295$
      00034D 05*20            [12] 1480 	inc	(_runtime + 3)
      00034F                       1481 00295$:
                                   1482 ;	main.c:479: if (runtime % 5000 == 0)
      00034F 75*00 88         [24] 1483 	mov	__modulong_PARM_2,#0x88
      000352 75*01 13         [24] 1484 	mov	(__modulong_PARM_2 + 1),#0x13
      000355 E4               [12] 1485 	clr	a
      000356 F5*02            [12] 1486 	mov	(__modulong_PARM_2 + 2),a
      000358 F5*03            [12] 1487 	mov	(__modulong_PARM_2 + 3),a
      00035A 85*1D 82         [24] 1488 	mov	dpl,_runtime
      00035D 85*1E 83         [24] 1489 	mov	dph,(_runtime + 1)
      000360 85*1F F0         [24] 1490 	mov	b,(_runtime + 2)
      000363 E5*20            [12] 1491 	mov	a,(_runtime + 3)
      000365 12r00r00         [24] 1492 	lcall	__modulong
      000368 AC 82            [24] 1493 	mov	r4,dpl
      00036A AD 83            [24] 1494 	mov	r5,dph
      00036C AE F0            [24] 1495 	mov	r6,b
      00036E FF               [12] 1496 	mov	r7,a
      00036F EC               [12] 1497 	mov	a,r4
      000370 4D               [12] 1498 	orl	a,r5
      000371 4E               [12] 1499 	orl	a,r6
      000372 4F               [12] 1500 	orl	a,r7
                                   1501 ;	main.c:480: srand((ADC_RES+10)*10);
      000373 70 15            [24] 1502 	jnz	00112$
      000375 AE BD            [24] 1503 	mov	r6,_ADC_RES
      000377 FF               [12] 1504 	mov	r7,a
      000378 74 0A            [12] 1505 	mov	a,#0x0a
      00037A 2E               [12] 1506 	add	a,r6
      00037B F5*00            [12] 1507 	mov	__mulint_PARM_2,a
      00037D E4               [12] 1508 	clr	a
      00037E 3F               [12] 1509 	addc	a,r7
      00037F F5*01            [12] 1510 	mov	(__mulint_PARM_2 + 1),a
      000381 90 00 0A         [24] 1511 	mov	dptr,#0x000a
      000384 12r00r00         [24] 1512 	lcall	__mulint
      000387 12r00r00         [24] 1513 	lcall	_srand
      00038A                       1514 00112$:
                                   1515 ;	main.c:487: if ((runtime == (currentTime + 10000)) && (bit3 == 0))
      00038A 74 10            [12] 1516 	mov	a,#0x10
      00038C 25*21            [12] 1517 	add	a,_currentTime
      00038E FC               [12] 1518 	mov	r4,a
      00038F 74 27            [12] 1519 	mov	a,#0x27
      000391 35*22            [12] 1520 	addc	a,(_currentTime + 1)
      000393 FD               [12] 1521 	mov	r5,a
      000394 E4               [12] 1522 	clr	a
      000395 35*23            [12] 1523 	addc	a,(_currentTime + 2)
      000397 FE               [12] 1524 	mov	r6,a
      000398 E4               [12] 1525 	clr	a
      000399 35*24            [12] 1526 	addc	a,(_currentTime + 3)
      00039B FF               [12] 1527 	mov	r7,a
      00039C EC               [12] 1528 	mov	a,r4
      00039D B5*1D 2E         [24] 1529 	cjne	a,_runtime,00114$
      0003A0 ED               [12] 1530 	mov	a,r5
      0003A1 B5*1E 2A         [24] 1531 	cjne	a,(_runtime + 1),00114$
      0003A4 EE               [12] 1532 	mov	a,r6
      0003A5 B5*1F 26         [24] 1533 	cjne	a,(_runtime + 2),00114$
      0003A8 EF               [12] 1534 	mov	a,r7
      0003A9 B5*20 22         [24] 1535 	cjne	a,(_runtime + 3),00114$
      0003AC 20*03 1F         [24] 1536 	jb	_bit3,00114$
                                   1537 ;	main.c:489: stormBit = 0;
      0003AF 75*28 00         [24] 1538 	mov	_stormBit,#0x00
                                   1539 ;	main.c:490: TR1 = 0;
                                   1540 ;	assignBit
      0003B2 C2 8E            [12] 1541 	clr	_TR1
                                   1542 ;	main.c:491: TR0 = 0;
                                   1543 ;	assignBit
      0003B4 C2 8C            [12] 1544 	clr	_TR0
                                   1545 ;	main.c:492: EADC = 0;
                                   1546 ;	assignBit
      0003B6 C2 AD            [12] 1547 	clr	_EADC
                                   1548 ;	main.c:493: P0 = 0x00;
      0003B8 75 80 00         [24] 1549 	mov	_P0,#0x00
                                   1550 ;	main.c:494: CR = 1;
                                   1551 ;	assignBit
      0003BB D2 DE            [12] 1552 	setb	_CR
                                   1553 ;	main.c:495: printLCD(turb3);
      0003BD 90r04r82         [24] 1554 	mov	dptr,#_turb3
      0003C0 75 F0 80         [24] 1555 	mov	b,#0x80
      0003C3 12r01r98         [24] 1556 	lcall	_printLCD
                                   1557 ;	main.c:497: TR0 = 1;
                                   1558 ;	assignBit
      0003C6 D2 8C            [12] 1559 	setb	_TR0
                                   1560 ;	main.c:498: TR1 = 1;
                                   1561 ;	assignBit
      0003C8 D2 8E            [12] 1562 	setb	_TR1
                                   1563 ;	main.c:499: EADC = 1;
                                   1564 ;	assignBit
      0003CA D2 AD            [12] 1565 	setb	_EADC
                                   1566 ;	main.c:500: bit3 = 1;
                                   1567 ;	assignBit
      0003CC D2*03            [12] 1568 	setb	_bit3
      0003CE                       1569 00114$:
                                   1570 ;	main.c:504: if ((rndNum*20) < 10)
      0003CE 85*16*00         [24] 1571 	mov	__mulint_PARM_2,_rndNum
      0003D1 85*17*01         [24] 1572 	mov	(__mulint_PARM_2 + 1),(_rndNum + 1)
      0003D4 90 00 14         [24] 1573 	mov	dptr,#0x0014
      0003D7 12r00r00         [24] 1574 	lcall	__mulint
      0003DA AE 82            [24] 1575 	mov	r6,dpl
      0003DC AF 83            [24] 1576 	mov	r7,dph
      0003DE C3               [12] 1577 	clr	c
      0003DF EE               [12] 1578 	mov	a,r6
      0003E0 94 0A            [12] 1579 	subb	a,#0x0a
      0003E2 EF               [12] 1580 	mov	a,r7
      0003E3 94 00            [12] 1581 	subb	a,#0x00
      0003E5 50 43            [24] 1582 	jnc	00119$
                                   1583 ;	main.c:506: if (bit1 == 0)
      0003E7 20*01 40         [24] 1584 	jb	_bit1,00119$
                                   1585 ;	main.c:508: TR1 = 0;
                                   1586 ;	assignBit
      0003EA C2 8E            [12] 1587 	clr	_TR1
                                   1588 ;	main.c:509: TR0 = 0;
                                   1589 ;	assignBit
      0003EC C2 8C            [12] 1590 	clr	_TR0
                                   1591 ;	main.c:510: EADC = 0;
                                   1592 ;	assignBit
      0003EE C2 AD            [12] 1593 	clr	_EADC
                                   1594 ;	main.c:511: P0 = 0x00;
      0003F0 75 80 00         [24] 1595 	mov	_P0,#0x00
                                   1596 ;	main.c:512: CR = 1;
                                   1597 ;	assignBit
      0003F3 D2 DE            [12] 1598 	setb	_CR
                                   1599 ;	main.c:513: write_data(rndNum+0x30);
      0003F5 AF*16            [24] 1600 	mov	r7,_rndNum
      0003F7 74 30            [12] 1601 	mov	a,#0x30
      0003F9 2F               [12] 1602 	add	a,r7
      0003FA F5 82            [12] 1603 	mov	dpl,a
      0003FC 12r00r87         [24] 1604 	lcall	_write_data
                                   1605 ;	main.c:514: delay(1000);
      0003FF 90 03 E8         [24] 1606 	mov	dptr,#0x03e8
      000402 12r00r22         [24] 1607 	lcall	_delay
                                   1608 ;	main.c:515: write_com(0x01);
      000405 75 82 01         [24] 1609 	mov	dpl,#0x01
      000408 12r00r64         [24] 1610 	lcall	_write_com
                                   1611 ;	main.c:516: printLCD(turb1);
      00040B 90r03r6F         [24] 1612 	mov	dptr,#_turb1
      00040E 75 F0 80         [24] 1613 	mov	b,#0x80
      000411 12r01r98         [24] 1614 	lcall	_printLCD
                                   1615 ;	main.c:518: TR0 = 1;
                                   1616 ;	assignBit
      000414 D2 8C            [12] 1617 	setb	_TR0
                                   1618 ;	main.c:519: TR1 = 1;
                                   1619 ;	assignBit
      000416 D2 8E            [12] 1620 	setb	_TR1
                                   1621 ;	main.c:520: EADC = 1; 
                                   1622 ;	assignBit
      000418 D2 AD            [12] 1623 	setb	_EADC
                                   1624 ;	main.c:521: bit1 = 1;
                                   1625 ;	assignBit
      00041A D2*01            [12] 1626 	setb	_bit1
                                   1627 ;	main.c:522: bit2 = 0;
                                   1628 ;	assignBit
      00041C C2*02            [12] 1629 	clr	_bit2
                                   1630 ;	main.c:523: currentTime = runtime;
      00041E 85*1D*21         [24] 1631 	mov	_currentTime,_runtime
      000421 85*1E*22         [24] 1632 	mov	(_currentTime + 1),(_runtime + 1)
      000424 85*1F*23         [24] 1633 	mov	(_currentTime + 2),(_runtime + 2)
      000427 85*20*24         [24] 1634 	mov	(_currentTime + 3),(_runtime + 3)
      00042A                       1635 00119$:
                                   1636 ;	main.c:526: if ((runtime == (currentTime + 10000)) && (bit2 == 0))
      00042A 74 10            [12] 1637 	mov	a,#0x10
      00042C 25*21            [12] 1638 	add	a,_currentTime
      00042E FC               [12] 1639 	mov	r4,a
      00042F 74 27            [12] 1640 	mov	a,#0x27
      000431 35*22            [12] 1641 	addc	a,(_currentTime + 1)
      000433 FD               [12] 1642 	mov	r5,a
      000434 E4               [12] 1643 	clr	a
      000435 35*23            [12] 1644 	addc	a,(_currentTime + 2)
      000437 FE               [12] 1645 	mov	r6,a
      000438 E4               [12] 1646 	clr	a
      000439 35*24            [12] 1647 	addc	a,(_currentTime + 3)
      00043B FF               [12] 1648 	mov	r7,a
      00043C EC               [12] 1649 	mov	a,r4
      00043D B5*1D 3C         [24] 1650 	cjne	a,_runtime,00121$
      000440 ED               [12] 1651 	mov	a,r5
      000441 B5*1E 38         [24] 1652 	cjne	a,(_runtime + 1),00121$
      000444 EE               [12] 1653 	mov	a,r6
      000445 B5*1F 34         [24] 1654 	cjne	a,(_runtime + 2),00121$
      000448 EF               [12] 1655 	mov	a,r7
      000449 B5*20 30         [24] 1656 	cjne	a,(_runtime + 3),00121$
      00044C 20*02 2D         [24] 1657 	jb	_bit2,00121$
                                   1658 ;	main.c:529: TR1 = 0;
                                   1659 ;	assignBit
      00044F C2 8E            [12] 1660 	clr	_TR1
                                   1661 ;	main.c:530: TR0 = 0;
                                   1662 ;	assignBit
      000451 C2 8C            [12] 1663 	clr	_TR0
                                   1664 ;	main.c:531: EADC = 0;
                                   1665 ;	assignBit
      000453 C2 AD            [12] 1666 	clr	_EADC
                                   1667 ;	main.c:532: P0 = 0x00;
      000455 75 80 00         [24] 1668 	mov	_P0,#0x00
                                   1669 ;	main.c:533: CR = 1;
                                   1670 ;	assignBit
      000458 D2 DE            [12] 1671 	setb	_CR
                                   1672 ;	main.c:534: printLCD(turb2);
      00045A 90r04r2B         [24] 1673 	mov	dptr,#_turb2
      00045D 75 F0 80         [24] 1674 	mov	b,#0x80
      000460 12r01r98         [24] 1675 	lcall	_printLCD
                                   1676 ;	main.c:536: TR0 = 1;
                                   1677 ;	assignBit
      000463 D2 8C            [12] 1678 	setb	_TR0
                                   1679 ;	main.c:537: TR1 = 1;
                                   1680 ;	assignBit
      000465 D2 8E            [12] 1681 	setb	_TR1
                                   1682 ;	main.c:538: EADC = 1;
                                   1683 ;	assignBit
      000467 D2 AD            [12] 1684 	setb	_EADC
                                   1685 ;	main.c:539: stormBit = 1;
      000469 75*28 01         [24] 1686 	mov	_stormBit,#0x01
                                   1687 ;	main.c:541: bit2 = 1;
                                   1688 ;	assignBit
      00046C D2*02            [12] 1689 	setb	_bit2
                                   1690 ;	main.c:542: bit3 = 0;
                                   1691 ;	assignBit
      00046E C2*03            [12] 1692 	clr	_bit3
                                   1693 ;	main.c:543: currentTime = runtime;
      000470 85*1D*21         [24] 1694 	mov	_currentTime,_runtime
      000473 85*1E*22         [24] 1695 	mov	(_currentTime + 1),(_runtime + 1)
      000476 85*1F*23         [24] 1696 	mov	(_currentTime + 2),(_runtime + 2)
      000479 85*20*24         [24] 1697 	mov	(_currentTime + 3),(_runtime + 3)
      00047C                       1698 00121$:
                                   1699 ;	main.c:545: if (thrust > 50000.0)
      00047C C0*31            [24] 1700 	push	_thrust
      00047E C0*32            [24] 1701 	push	(_thrust + 1)
      000480 C0*33            [24] 1702 	push	(_thrust + 2)
      000482 C0*34            [24] 1703 	push	(_thrust + 3)
      000484 90 50 00         [24] 1704 	mov	dptr,#0x5000
      000487 75 F0 43         [24] 1705 	mov	b,#0x43
      00048A 74 47            [12] 1706 	mov	a,#0x47
      00048C 12r00r00         [24] 1707 	lcall	___fslt
      00048F AF 82            [24] 1708 	mov	r7,dpl
      000491 E5 81            [12] 1709 	mov	a,sp
      000493 24 FC            [12] 1710 	add	a,#0xfc
      000495 F5 81            [12] 1711 	mov	sp,a
      000497 EF               [12] 1712 	mov	a,r7
      000498 60 1F            [24] 1713 	jz	00126$
                                   1714 ;	main.c:547: thrust_time++;
      00049A 05*59            [12] 1715 	inc	_thrust_time
      00049C E4               [12] 1716 	clr	a
      00049D B5*59 02         [24] 1717 	cjne	a,_thrust_time,00306$
      0004A0 05*5A            [12] 1718 	inc	(_thrust_time + 1)
      0004A2                       1719 00306$:
                                   1720 ;	main.c:548: if (thrust_time > 4000)
      0004A2 C3               [12] 1721 	clr	c
      0004A3 74 A0            [12] 1722 	mov	a,#0xa0
      0004A5 95*59            [12] 1723 	subb	a,_thrust_time
      0004A7 74 0F            [12] 1724 	mov	a,#0x0f
      0004A9 95*5A            [12] 1725 	subb	a,(_thrust_time + 1)
      0004AB 50 11            [24] 1726 	jnc	00127$
                                   1727 ;	main.c:550: CR = 1;
                                   1728 ;	assignBit
      0004AD D2 DE            [12] 1729 	setb	_CR
                                   1730 ;	main.c:551: enginebit = 1;
      0004AF 75*27 01         [24] 1731 	mov	_enginebit,#0x01
                                   1732 ;	main.c:552: thrust_time = 0;
      0004B2 E4               [12] 1733 	clr	a
      0004B3 F5*59            [12] 1734 	mov	_thrust_time,a
      0004B5 F5*5A            [12] 1735 	mov	(_thrust_time + 1),a
      0004B7 80 05            [24] 1736 	sjmp	00127$
      0004B9                       1737 00126$:
                                   1738 ;	main.c:557: thrust_time = 0;
      0004B9 E4               [12] 1739 	clr	a
      0004BA F5*59            [12] 1740 	mov	_thrust_time,a
      0004BC F5*5A            [12] 1741 	mov	(_thrust_time + 1),a
      0004BE                       1742 00127$:
                                   1743 ;	main.c:560: if (velocity > 50.0 || velocity <-50.0)
      0004BE C0*29            [24] 1744 	push	_velocity
      0004C0 C0*2A            [24] 1745 	push	(_velocity + 1)
      0004C2 C0*2B            [24] 1746 	push	(_velocity + 2)
      0004C4 C0*2C            [24] 1747 	push	(_velocity + 3)
      0004C6 90 00 00         [24] 1748 	mov	dptr,#0x0000
      0004C9 75 F0 48         [24] 1749 	mov	b,#0x48
      0004CC 74 42            [12] 1750 	mov	a,#0x42
      0004CE 12r00r00         [24] 1751 	lcall	___fslt
      0004D1 AF 82            [24] 1752 	mov	r7,dpl
      0004D3 E5 81            [12] 1753 	mov	a,sp
      0004D5 24 FC            [12] 1754 	add	a,#0xfc
      0004D7 F5 81            [12] 1755 	mov	sp,a
      0004D9 EF               [12] 1756 	mov	a,r7
      0004DA 70 25            [24] 1757 	jnz	00134$
      0004DC C0 E0            [24] 1758 	push	acc
      0004DE C0 E0            [24] 1759 	push	acc
      0004E0 74 48            [12] 1760 	mov	a,#0x48
      0004E2 C0 E0            [24] 1761 	push	acc
      0004E4 74 C2            [12] 1762 	mov	a,#0xc2
      0004E6 C0 E0            [24] 1763 	push	acc
      0004E8 85*29 82         [24] 1764 	mov	dpl,_velocity
      0004EB 85*2A 83         [24] 1765 	mov	dph,(_velocity + 1)
      0004EE 85*2B F0         [24] 1766 	mov	b,(_velocity + 2)
      0004F1 E5*2C            [12] 1767 	mov	a,(_velocity + 3)
      0004F3 12r00r00         [24] 1768 	lcall	___fslt
      0004F6 AF 82            [24] 1769 	mov	r7,dpl
      0004F8 E5 81            [12] 1770 	mov	a,sp
      0004FA 24 FC            [12] 1771 	add	a,#0xfc
      0004FC F5 81            [12] 1772 	mov	sp,a
      0004FE EF               [12] 1773 	mov	a,r7
      0004FF 60 5C            [24] 1774 	jz	00135$
      000501                       1775 00134$:
                                   1776 ;	main.c:562: velTime++;
      000501 05*01            [12] 1777 	inc	_velTime
      000503 E4               [12] 1778 	clr	a
      000504 B5*01 02         [24] 1779 	cjne	a,_velTime,00310$
      000507 05*02            [12] 1780 	inc	(_velTime + 1)
      000509                       1781 00310$:
                                   1782 ;	main.c:564: if (velocityBit == 1)
      000509 74 01            [12] 1783 	mov	a,#0x01
      00050B B5*00 20         [24] 1784 	cjne	a,_velocityBit,00129$
                                   1785 ;	main.c:566: velocityBit = 0;
      00050E 75*00 00         [24] 1786 	mov	_velocityBit,#0x00
                                   1787 ;	main.c:567: TR1 = 0;
                                   1788 ;	assignBit
      000511 C2 8E            [12] 1789 	clr	_TR1
                                   1790 ;	main.c:568: TR0 = 0;
                                   1791 ;	assignBit
      000513 C2 8C            [12] 1792 	clr	_TR0
                                   1793 ;	main.c:569: EADC = 0;
                                   1794 ;	assignBit
      000515 C2 AD            [12] 1795 	clr	_EADC
                                   1796 ;	main.c:570: P0 = 0x00;
      000517 75 80 00         [24] 1797 	mov	_P0,#0x00
                                   1798 ;	main.c:571: CR = 1;
                                   1799 ;	assignBit
      00051A D2 DE            [12] 1800 	setb	_CR
                                   1801 ;	main.c:572: printLCD(vel1);
      00051C 90r05r75         [24] 1802 	mov	dptr,#_vel1
      00051F 75 F0 80         [24] 1803 	mov	b,#0x80
      000522 12r01r98         [24] 1804 	lcall	_printLCD
                                   1805 ;	main.c:573: TR0 = 1;
                                   1806 ;	assignBit
      000525 D2 8C            [12] 1807 	setb	_TR0
                                   1808 ;	main.c:574: TR1 = 1;
                                   1809 ;	assignBit
      000527 D2 8E            [12] 1810 	setb	_TR1
                                   1811 ;	main.c:575: EADC = 1;
                                   1812 ;	assignBit
      000529 D2 AD            [12] 1813 	setb	_EADC
                                   1814 ;	main.c:576: velocityBit = 0;
      00052B 75*00 00         [24] 1815 	mov	_velocityBit,#0x00
      00052E                       1816 00129$:
                                   1817 ;	main.c:578: if (velTime > 5000)
      00052E C3               [12] 1818 	clr	c
      00052F 74 88            [12] 1819 	mov	a,#0x88
      000531 95*01            [12] 1820 	subb	a,_velTime
      000533 74 13            [12] 1821 	mov	a,#0x13
      000535 95*02            [12] 1822 	subb	a,(_velTime + 1)
      000537 50 24            [24] 1823 	jnc	00135$
                                   1824 ;	main.c:581: if (leakBit == 0)
      000539 20*00 21         [24] 1825 	jb	_leakBit,00135$
                                   1826 ;	main.c:583: TR1 = 0;
                                   1827 ;	assignBit
      00053C C2 8E            [12] 1828 	clr	_TR1
                                   1829 ;	main.c:584: TR0 = 0;
                                   1830 ;	assignBit
      00053E C2 8C            [12] 1831 	clr	_TR0
                                   1832 ;	main.c:585: EADC = 0;
                                   1833 ;	assignBit
      000540 C2 AD            [12] 1834 	clr	_EADC
                                   1835 ;	main.c:586: P0 = 0x00;
      000542 75 80 00         [24] 1836 	mov	_P0,#0x00
                                   1837 ;	main.c:587: CR = 1;
                                   1838 ;	assignBit
      000545 D2 DE            [12] 1839 	setb	_CR
                                   1840 ;	main.c:588: velTime = 0;
      000547 E4               [12] 1841 	clr	a
      000548 F5*01            [12] 1842 	mov	_velTime,a
      00054A F5*02            [12] 1843 	mov	(_velTime + 1),a
                                   1844 ;	main.c:589: printLCD(leak1);
      00054C 90r04rDE         [24] 1845 	mov	dptr,#_leak1
      00054F 75 F0 80         [24] 1846 	mov	b,#0x80
      000552 12r01r98         [24] 1847 	lcall	_printLCD
                                   1848 ;	main.c:590: leakBit = 1;
                                   1849 ;	assignBit
      000555 D2*00            [12] 1850 	setb	_leakBit
                                   1851 ;	main.c:591: TR0 = 1;
                                   1852 ;	assignBit
      000557 D2 8C            [12] 1853 	setb	_TR0
                                   1854 ;	main.c:592: TR1 = 1;
                                   1855 ;	assignBit
      000559 D2 8E            [12] 1856 	setb	_TR1
                                   1857 ;	main.c:593: EADC = 1;
                                   1858 ;	assignBit
      00055B D2 AD            [12] 1859 	setb	_EADC
      00055D                       1860 00135$:
                                   1861 ;	main.c:597: if (velocity < 48.0 && velocity > -48.0)
      00055D E4               [12] 1862 	clr	a
      00055E C0 E0            [24] 1863 	push	acc
      000560 C0 E0            [24] 1864 	push	acc
      000562 74 40            [12] 1865 	mov	a,#0x40
      000564 C0 E0            [24] 1866 	push	acc
      000566 74 42            [12] 1867 	mov	a,#0x42
      000568 C0 E0            [24] 1868 	push	acc
      00056A 85*29 82         [24] 1869 	mov	dpl,_velocity
      00056D 85*2A 83         [24] 1870 	mov	dph,(_velocity + 1)
      000570 85*2B F0         [24] 1871 	mov	b,(_velocity + 2)
      000573 E5*2C            [12] 1872 	mov	a,(_velocity + 3)
      000575 12r00r00         [24] 1873 	lcall	___fslt
      000578 AF 82            [24] 1874 	mov	r7,dpl
      00057A E5 81            [12] 1875 	mov	a,sp
      00057C 24 FC            [12] 1876 	add	a,#0xfc
      00057E F5 81            [12] 1877 	mov	sp,a
      000580 EF               [12] 1878 	mov	a,r7
      000581 60 21            [24] 1879 	jz	00138$
      000583 C0*29            [24] 1880 	push	_velocity
      000585 C0*2A            [24] 1881 	push	(_velocity + 1)
      000587 C0*2B            [24] 1882 	push	(_velocity + 2)
      000589 C0*2C            [24] 1883 	push	(_velocity + 3)
      00058B 90 00 00         [24] 1884 	mov	dptr,#0x0000
      00058E 75 F0 40         [24] 1885 	mov	b,#0x40
      000591 74 C2            [12] 1886 	mov	a,#0xc2
      000593 12r00r00         [24] 1887 	lcall	___fslt
      000596 AF 82            [24] 1888 	mov	r7,dpl
      000598 E5 81            [12] 1889 	mov	a,sp
      00059A 24 FC            [12] 1890 	add	a,#0xfc
      00059C F5 81            [12] 1891 	mov	sp,a
      00059E EF               [12] 1892 	mov	a,r7
      00059F 60 03            [24] 1893 	jz	00138$
                                   1894 ;	main.c:599: velocityBit = 1;
      0005A1 75*00 01         [24] 1895 	mov	_velocityBit,#0x01
      0005A4                       1896 00138$:
                                   1897 ;	main.c:601: if (height < 1.0)
      0005A4 E4               [12] 1898 	clr	a
      0005A5 C0 E0            [24] 1899 	push	acc
      0005A7 C0 E0            [24] 1900 	push	acc
      0005A9 74 80            [12] 1901 	mov	a,#0x80
      0005AB C0 E0            [24] 1902 	push	acc
      0005AD 74 3F            [12] 1903 	mov	a,#0x3f
      0005AF C0 E0            [24] 1904 	push	acc
      0005B1 85*39 82         [24] 1905 	mov	dpl,_height
      0005B4 85*3A 83         [24] 1906 	mov	dph,(_height + 1)
      0005B7 85*3B F0         [24] 1907 	mov	b,(_height + 2)
      0005BA E5*3C            [12] 1908 	mov	a,(_height + 3)
      0005BC 12r00r00         [24] 1909 	lcall	___fslt
      0005BF AF 82            [24] 1910 	mov	r7,dpl
      0005C1 E5 81            [12] 1911 	mov	a,sp
      0005C3 24 FC            [12] 1912 	add	a,#0xfc
      0005C5 F5 81            [12] 1913 	mov	sp,a
      0005C7 EF               [12] 1914 	mov	a,r7
      0005C8 60 51            [24] 1915 	jz	00150$
                                   1916 ;	main.c:603: TR1 = 0;
                                   1917 ;	assignBit
      0005CA C2 8E            [12] 1918 	clr	_TR1
                                   1919 ;	main.c:604: TR0 = 0;
                                   1920 ;	assignBit
      0005CC C2 8C            [12] 1921 	clr	_TR0
                                   1922 ;	main.c:605: P0 = 0x00;
      0005CE 75 80 00         [24] 1923 	mov	_P0,#0x00
                                   1924 ;	main.c:606: if (velocity > -10.0)
      0005D1 C0*29            [24] 1925 	push	_velocity
      0005D3 C0*2A            [24] 1926 	push	(_velocity + 1)
      0005D5 C0*2B            [24] 1927 	push	(_velocity + 2)
      0005D7 C0*2C            [24] 1928 	push	(_velocity + 3)
      0005D9 90 00 00         [24] 1929 	mov	dptr,#0x0000
      0005DC 75 F0 20         [24] 1930 	mov	b,#0x20
      0005DF 74 C1            [12] 1931 	mov	a,#0xc1
      0005E1 12r00r00         [24] 1932 	lcall	___fslt
      0005E4 AF 82            [24] 1933 	mov	r7,dpl
      0005E6 E5 81            [12] 1934 	mov	a,sp
      0005E8 24 FC            [12] 1935 	add	a,#0xfc
      0005EA F5 81            [12] 1936 	mov	sp,a
      0005EC EF               [12] 1937 	mov	a,r7
      0005ED 60 16            [24] 1938 	jz	00147$
                                   1939 ;	main.c:608: TR1 = 0;
                                   1940 ;	assignBit
      0005EF C2 8E            [12] 1941 	clr	_TR1
                                   1942 ;	main.c:609: TR0 = 0;
                                   1943 ;	assignBit
      0005F1 C2 8C            [12] 1944 	clr	_TR0
                                   1945 ;	main.c:610: EADC = 0;
                                   1946 ;	assignBit
      0005F3 C2 AD            [12] 1947 	clr	_EADC
                                   1948 ;	main.c:611: P0 = 0x00;
      0005F5 75 80 00         [24] 1949 	mov	_P0,#0x00
                                   1950 ;	main.c:612: CR = 1;
                                   1951 ;	assignBit
      0005F8 D2 DE            [12] 1952 	setb	_CR
                                   1953 ;	main.c:613: printLCD(win);
      0005FA 90r00r0C         [24] 1954 	mov	dptr,#_win
      0005FD 75 F0 80         [24] 1955 	mov	b,#0x80
      000600 12r01r98         [24] 1956 	lcall	_printLCD
                                   1957 ;	main.c:614: while(1);
      000603                       1958 00141$:
      000603 80 FE            [24] 1959 	sjmp	00141$
      000605                       1960 00147$:
                                   1961 ;	main.c:618: TR1 = 0;
                                   1962 ;	assignBit
      000605 C2 8E            [12] 1963 	clr	_TR1
                                   1964 ;	main.c:619: TR0 = 0;
                                   1965 ;	assignBit
      000607 C2 8C            [12] 1966 	clr	_TR0
                                   1967 ;	main.c:620: EADC = 0;
                                   1968 ;	assignBit
      000609 C2 AD            [12] 1969 	clr	_EADC
                                   1970 ;	main.c:621: P0 = 0x00;
      00060B 75 80 00         [24] 1971 	mov	_P0,#0x00
                                   1972 ;	main.c:622: CR = 1;
                                   1973 ;	assignBit
      00060E D2 DE            [12] 1974 	setb	_CR
                                   1975 ;	main.c:623: printLCD(lose);
      000610 90r00r64         [24] 1976 	mov	dptr,#_lose
      000613 75 F0 80         [24] 1977 	mov	b,#0x80
      000616 12r01r98         [24] 1978 	lcall	_printLCD
                                   1979 ;	main.c:624: while(1);
      000619                       1980 00144$:
      000619 80 FE            [24] 1981 	sjmp	00144$
      00061B                       1982 00150$:
                                   1983 ;	main.c:630: if (enginebit == 1)
      00061B 74 01            [12] 1984 	mov	a,#0x01
      00061D B5*27 41         [24] 1985 	cjne	a,_enginebit,00152$
                                   1986 ;	main.c:632: TR1 = 0;
                                   1987 ;	assignBit
      000620 C2 8E            [12] 1988 	clr	_TR1
                                   1989 ;	main.c:633: TR0 = 0;
                                   1990 ;	assignBit
      000622 C2 8C            [12] 1991 	clr	_TR0
                                   1992 ;	main.c:634: EADC = 0;
                                   1993 ;	assignBit
      000624 C2 AD            [12] 1994 	clr	_EADC
                                   1995 ;	main.c:635: P0 = 0x00;
      000626 75 80 00         [24] 1996 	mov	_P0,#0x00
                                   1997 ;	main.c:636: CR = 1;
                                   1998 ;	assignBit
      000629 D2 DE            [12] 1999 	setb	_CR
                                   2000 ;	main.c:637: printLCD(engine1);
      00062B 90r02rEF         [24] 2001 	mov	dptr,#_engine1
      00062E 75 F0 80         [24] 2002 	mov	b,#0x80
      000631 12r01r98         [24] 2003 	lcall	_printLCD
                                   2004 ;	main.c:638: in_thrust = in_thrust*0.9;
      000634 C0*2D            [24] 2005 	push	_in_thrust
      000636 C0*2E            [24] 2006 	push	(_in_thrust + 1)
      000638 C0*2F            [24] 2007 	push	(_in_thrust + 2)
      00063A C0*30            [24] 2008 	push	(_in_thrust + 3)
      00063C 90 66 66         [24] 2009 	mov	dptr,#0x6666
      00063F 75 F0 66         [24] 2010 	mov	b,#0x66
      000642 74 3F            [12] 2011 	mov	a,#0x3f
      000644 12r00r00         [24] 2012 	lcall	___fsmul
      000647 85 82*2D         [24] 2013 	mov	_in_thrust,dpl
      00064A 85 83*2E         [24] 2014 	mov	(_in_thrust + 1),dph
      00064D 85 F0*2F         [24] 2015 	mov	(_in_thrust + 2),b
      000650 F5*30            [12] 2016 	mov	(_in_thrust + 3),a
      000652 E5 81            [12] 2017 	mov	a,sp
      000654 24 FC            [12] 2018 	add	a,#0xfc
      000656 F5 81            [12] 2019 	mov	sp,a
                                   2020 ;	main.c:639: enginebit = 0;
      000658 75*27 00         [24] 2021 	mov	_enginebit,#0x00
                                   2022 ;	main.c:640: TR0 = 1;
                                   2023 ;	assignBit
      00065B D2 8C            [12] 2024 	setb	_TR0
                                   2025 ;	main.c:641: TR1 = 1;
                                   2026 ;	assignBit
      00065D D2 8E            [12] 2027 	setb	_TR1
                                   2028 ;	main.c:642: EADC = 1;
                                   2029 ;	assignBit
      00065F D2 AD            [12] 2030 	setb	_EADC
      000661                       2031 00152$:
                                   2032 ;	main.c:645: if (leakBit == 1)
      000661 30*00 2F         [24] 2033 	jnb	_leakBit,00154$
                                   2034 ;	main.c:647: fuel = fuel - 0.00002;
      000664 74 AC            [12] 2035 	mov	a,#0xac
      000666 C0 E0            [24] 2036 	push	acc
      000668 74 C5            [12] 2037 	mov	a,#0xc5
      00066A C0 E0            [24] 2038 	push	acc
      00066C 74 A7            [12] 2039 	mov	a,#0xa7
      00066E C0 E0            [24] 2040 	push	acc
      000670 74 37            [12] 2041 	mov	a,#0x37
      000672 C0 E0            [24] 2042 	push	acc
      000674 85*41 82         [24] 2043 	mov	dpl,_fuel
      000677 85*42 83         [24] 2044 	mov	dph,(_fuel + 1)
      00067A 85*43 F0         [24] 2045 	mov	b,(_fuel + 2)
      00067D E5*44            [12] 2046 	mov	a,(_fuel + 3)
      00067F 12r00r00         [24] 2047 	lcall	___fssub
      000682 85 82*41         [24] 2048 	mov	_fuel,dpl
      000685 85 83*42         [24] 2049 	mov	(_fuel + 1),dph
      000688 85 F0*43         [24] 2050 	mov	(_fuel + 2),b
      00068B F5*44            [12] 2051 	mov	(_fuel + 3),a
      00068D E5 81            [12] 2052 	mov	a,sp
      00068F 24 FC            [12] 2053 	add	a,#0xfc
      000691 F5 81            [12] 2054 	mov	sp,a
      000693                       2055 00154$:
                                   2056 ;	main.c:649: if (B0 == 0)
      000693 20 B2 0F         [24] 2057 	jb	_P3_2,00156$
                                   2058 ;	main.c:652: ship_thrust = in_thrust;
      000696 85*2D*35         [24] 2059 	mov	_ship_thrust,_in_thrust
      000699 85*2E*36         [24] 2060 	mov	(_ship_thrust + 1),(_in_thrust + 1)
      00069C 85*2F*37         [24] 2061 	mov	(_ship_thrust + 2),(_in_thrust + 2)
      00069F 85*30*38         [24] 2062 	mov	(_ship_thrust + 3),(_in_thrust + 3)
      0006A2 02r03r1E         [24] 2063 	ljmp	00159$
      0006A5                       2064 00156$:
                                   2065 ;	main.c:656: ship_thrust = in_thrust/2.0;
      0006A5 E4               [12] 2066 	clr	a
      0006A6 C0 E0            [24] 2067 	push	acc
      0006A8 C0 E0            [24] 2068 	push	acc
      0006AA C0 E0            [24] 2069 	push	acc
      0006AC 74 40            [12] 2070 	mov	a,#0x40
      0006AE C0 E0            [24] 2071 	push	acc
      0006B0 85*2D 82         [24] 2072 	mov	dpl,_in_thrust
      0006B3 85*2E 83         [24] 2073 	mov	dph,(_in_thrust + 1)
      0006B6 85*2F F0         [24] 2074 	mov	b,(_in_thrust + 2)
      0006B9 E5*30            [12] 2075 	mov	a,(_in_thrust + 3)
      0006BB 12r00r00         [24] 2076 	lcall	___fsdiv
      0006BE 85 82*35         [24] 2077 	mov	_ship_thrust,dpl
      0006C1 85 83*36         [24] 2078 	mov	(_ship_thrust + 1),dph
      0006C4 85 F0*37         [24] 2079 	mov	(_ship_thrust + 2),b
      0006C7 F5*38            [12] 2080 	mov	(_ship_thrust + 3),a
      0006C9 E5 81            [12] 2081 	mov	a,sp
      0006CB 24 FC            [12] 2082 	add	a,#0xfc
      0006CD F5 81            [12] 2083 	mov	sp,a
                                   2084 ;	main.c:664: }
      0006CF 02r03r1E         [24] 2085 	ljmp	00159$
                                   2086 ;------------------------------------------------------------
                                   2087 ;Allocation info for local variables in function 'timer0Interrupt'
                                   2088 ;------------------------------------------------------------
                                   2089 ;	main.c:666: void timer0Interrupt(void) __interrupt 1// __using 1
                                   2090 ;	-----------------------------------------
                                   2091 ;	 function timer0Interrupt
                                   2092 ;	-----------------------------------------
      0006D2                       2093 _timer0Interrupt:
      0006D2 C0*00            [24] 2094 	push	bits
      0006D4 C0 E0            [24] 2095 	push	acc
      0006D6 C0 F0            [24] 2096 	push	b
      0006D8 C0 82            [24] 2097 	push	dpl
      0006DA C0 83            [24] 2098 	push	dph
      0006DC C0 07            [24] 2099 	push	(0+7)
      0006DE C0 06            [24] 2100 	push	(0+6)
      0006E0 C0 05            [24] 2101 	push	(0+5)
      0006E2 C0 04            [24] 2102 	push	(0+4)
      0006E4 C0 03            [24] 2103 	push	(0+3)
      0006E6 C0 02            [24] 2104 	push	(0+2)
      0006E8 C0 01            [24] 2105 	push	(0+1)
      0006EA C0 00            [24] 2106 	push	(0+0)
      0006EC C0 D0            [24] 2107 	push	psw
      0006EE 75 D0 00         [24] 2108 	mov	psw,#0x00
                                   2109 ;	main.c:669: TL0 = 0x80;		//Initial timer value
      0006F1 75 8A 80         [24] 2110 	mov	_TL0,#0x80
                                   2111 ;	main.c:670: TH0 = 0xFC;
      0006F4 75 8C FC         [24] 2112 	mov	_TH0,#0xfc
                                   2113 ;	main.c:688: if (w==0)
      0006F7 E5*18            [12] 2114 	mov	a,_w
      0006F9 70 46            [24] 2115 	jnz	00106$
                                   2116 ;	main.c:691: while(P4_5==0)
      0006FB                       2117 00101$:
      0006FB 20 C5 11         [24] 2118 	jb	_P4_5,00103$
                                   2119 ;	main.c:693: P0 = 0x00;
      0006FE 75 80 00         [24] 2120 	mov	_P0,#0x00
                                   2121 ;	main.c:694: trigger = 0;
                                   2122 ;	assignBit
      000701 C2 C4            [12] 2123 	clr	_P4_4
                                   2124 ;	main.c:695: trigger = 1;
                                   2125 ;	assignBit
      000703 D2 C4            [12] 2126 	setb	_P4_4
                                   2127 ;	main.c:696: DelaySmalltest();
      000705 12r00r11         [24] 2128 	lcall	_DelaySmalltest
                                   2129 ;	main.c:697: trigger = 0;
                                   2130 ;	assignBit
      000708 C2 C4            [12] 2131 	clr	_P4_4
                                   2132 ;	main.c:698: DelaySmalltest();
      00070A 12r00r11         [24] 2133 	lcall	_DelaySmalltest
      00070D 80 EC            [24] 2134 	sjmp	00101$
      00070F                       2135 00103$:
                                   2136 ;	main.c:700: for (i=0;i<16;i++)
      00070F E4               [12] 2137 	clr	a
      000710 F5*25            [12] 2138 	mov	_i,a
      000712 F5*26            [12] 2139 	mov	(_i + 1),a
      000714                       2140 00146$:
                                   2141 ;	main.c:702: P0 = 0x00;
      000714 75 80 00         [24] 2142 	mov	_P0,#0x00
                                   2143 ;	main.c:703: trigger = 0;
                                   2144 ;	assignBit
      000717 C2 C4            [12] 2145 	clr	_P4_4
                                   2146 ;	main.c:704: trigger = 1;
                                   2147 ;	assignBit
      000719 D2 C4            [12] 2148 	setb	_P4_4
                                   2149 ;	main.c:705: DelaySmalltest();
      00071B 12r00r11         [24] 2150 	lcall	_DelaySmalltest
                                   2151 ;	main.c:706: trigger = 0;
                                   2152 ;	assignBit
      00071E C2 C4            [12] 2153 	clr	_P4_4
                                   2154 ;	main.c:707: DelaySmalltest();
      000720 12r00r11         [24] 2155 	lcall	_DelaySmalltest
                                   2156 ;	main.c:700: for (i=0;i<16;i++)
      000723 05*25            [12] 2157 	inc	_i
      000725 E4               [12] 2158 	clr	a
      000726 B5*25 02         [24] 2159 	cjne	a,_i,00244$
      000729 05*26            [12] 2160 	inc	(_i + 1)
      00072B                       2161 00244$:
      00072B C3               [12] 2162 	clr	c
      00072C E5*25            [12] 2163 	mov	a,_i
      00072E 94 10            [12] 2164 	subb	a,#0x10
      000730 E5*26            [12] 2165 	mov	a,(_i + 1)
      000732 94 00            [12] 2166 	subb	a,#0x00
      000734 40 DE            [24] 2167 	jc	00146$
                                   2168 ;	main.c:709: display(digit1);
      000736 AE*03            [24] 2169 	mov	r6,_digit1
      000738 7F 00            [12] 2170 	mov	r7,#0x00
      00073A 8E 82            [24] 2171 	mov	dpl,r6
      00073C 8F 83            [24] 2172 	mov	dph,r7
      00073E 12r00r51         [24] 2173 	lcall	_display
      000741                       2174 00106$:
                                   2175 ;	main.c:711: if (w==1)
      000741 74 01            [12] 2176 	mov	a,#0x01
      000743 B5*18 16         [24] 2177 	cjne	a,_w,00111$
                                   2178 ;	main.c:714: while(P4_5==0)
      000746                       2179 00107$:
      000746 20 C5 08         [24] 2180 	jb	_P4_5,00109$
                                   2181 ;	main.c:717: trigger = 0;
                                   2182 ;	assignBit
      000749 C2 C4            [12] 2183 	clr	_P4_4
                                   2184 ;	main.c:718: trigger = 1;
                                   2185 ;	assignBit
      00074B D2 C4            [12] 2186 	setb	_P4_4
                                   2187 ;	main.c:720: trigger = 0;
                                   2188 ;	assignBit
      00074D C2 C4            [12] 2189 	clr	_P4_4
      00074F 80 F5            [24] 2190 	sjmp	00107$
      000751                       2191 00109$:
                                   2192 ;	main.c:727: display(digit2);
      000751 AE*04            [24] 2193 	mov	r6,_digit2
      000753 7F 00            [12] 2194 	mov	r7,#0x00
      000755 8E 82            [24] 2195 	mov	dpl,r6
      000757 8F 83            [24] 2196 	mov	dph,r7
      000759 12r00r51         [24] 2197 	lcall	_display
      00075C                       2198 00111$:
                                   2199 ;	main.c:729: if (w==2)
      00075C 74 02            [12] 2200 	mov	a,#0x02
      00075E B5*18 0B         [24] 2201 	cjne	a,_w,00113$
                                   2202 ;	main.c:732: display(digit3);
      000761 AE*05            [24] 2203 	mov	r6,_digit3
      000763 7F 00            [12] 2204 	mov	r7,#0x00
      000765 8E 82            [24] 2205 	mov	dpl,r6
      000767 8F 83            [24] 2206 	mov	dph,r7
      000769 12r00r51         [24] 2207 	lcall	_display
      00076C                       2208 00113$:
                                   2209 ;	main.c:734: if (w==3)
      00076C 74 03            [12] 2210 	mov	a,#0x03
      00076E B5*18 0B         [24] 2211 	cjne	a,_w,00115$
                                   2212 ;	main.c:737: display(digit4);
      000771 AE*06            [24] 2213 	mov	r6,_digit4
      000773 7F 00            [12] 2214 	mov	r7,#0x00
      000775 8E 82            [24] 2215 	mov	dpl,r6
      000777 8F 83            [24] 2216 	mov	dph,r7
      000779 12r00r51         [24] 2217 	lcall	_display
      00077C                       2218 00115$:
                                   2219 ;	main.c:740: if (w==4)
      00077C 74 04            [12] 2220 	mov	a,#0x04
      00077E B5*18 0B         [24] 2221 	cjne	a,_w,00117$
                                   2222 ;	main.c:743: display(digit1_1);
      000781 AE*07            [24] 2223 	mov	r6,_digit1_1
      000783 7F 00            [12] 2224 	mov	r7,#0x00
      000785 8E 82            [24] 2225 	mov	dpl,r6
      000787 8F 83            [24] 2226 	mov	dph,r7
      000789 12r00r51         [24] 2227 	lcall	_display
      00078C                       2228 00117$:
                                   2229 ;	main.c:745: if (w==5)
      00078C 74 05            [12] 2230 	mov	a,#0x05
      00078E B5*18 0B         [24] 2231 	cjne	a,_w,00119$
                                   2232 ;	main.c:748: display(digit1_3);
      000791 AE*09            [24] 2233 	mov	r6,_digit1_3
      000793 7F 00            [12] 2234 	mov	r7,#0x00
      000795 8E 82            [24] 2235 	mov	dpl,r6
      000797 8F 83            [24] 2236 	mov	dph,r7
      000799 12r00r51         [24] 2237 	lcall	_display
      00079C                       2238 00119$:
                                   2239 ;	main.c:751: if (w==6)
      00079C 74 06            [12] 2240 	mov	a,#0x06
      00079E B5*18 0D         [24] 2241 	cjne	a,_w,00121$
                                   2242 ;	main.c:754: display(digit1_4);
      0007A1 AE*0A            [24] 2243 	mov	r6,_digit1_4
      0007A3 7F 00            [12] 2244 	mov	r7,#0x00
      0007A5 8E 82            [24] 2245 	mov	dpl,r6
      0007A7 8F 83            [24] 2246 	mov	dph,r7
      0007A9 12r00r51         [24] 2247 	lcall	_display
                                   2248 ;	main.c:755: P0_7 = 1;
                                   2249 ;	assignBit
      0007AC D2 87            [12] 2250 	setb	_P0_7
      0007AE                       2251 00121$:
                                   2252 ;	main.c:757: if (w==7)
      0007AE 74 07            [12] 2253 	mov	a,#0x07
      0007B0 B5*18 0B         [24] 2254 	cjne	a,_w,00123$
                                   2255 ;	main.c:760: display(digit1_5);
      0007B3 AE*0B            [24] 2256 	mov	r6,_digit1_5
      0007B5 7F 00            [12] 2257 	mov	r7,#0x00
      0007B7 8E 82            [24] 2258 	mov	dpl,r6
      0007B9 8F 83            [24] 2259 	mov	dph,r7
      0007BB 12r00r51         [24] 2260 	lcall	_display
      0007BE                       2261 00123$:
                                   2262 ;	main.c:763: if (w==8)
      0007BE 74 08            [12] 2263 	mov	a,#0x08
      0007C0 B5*18 0B         [24] 2264 	cjne	a,_w,00125$
                                   2265 ;	main.c:766: display(digit2_1);
      0007C3 AE*0C            [24] 2266 	mov	r6,_digit2_1
      0007C5 7F 00            [12] 2267 	mov	r7,#0x00
      0007C7 8E 82            [24] 2268 	mov	dpl,r6
      0007C9 8F 83            [24] 2269 	mov	dph,r7
      0007CB 12r00r51         [24] 2270 	lcall	_display
      0007CE                       2271 00125$:
                                   2272 ;	main.c:768: if (w==9)
      0007CE 74 09            [12] 2273 	mov	a,#0x09
      0007D0 B5*18 0D         [24] 2274 	cjne	a,_w,00127$
                                   2275 ;	main.c:771: display(digit2_4);
      0007D3 AE*0F            [24] 2276 	mov	r6,_digit2_4
      0007D5 7F 00            [12] 2277 	mov	r7,#0x00
      0007D7 8E 82            [24] 2278 	mov	dpl,r6
      0007D9 8F 83            [24] 2279 	mov	dph,r7
      0007DB 12r00r51         [24] 2280 	lcall	_display
                                   2281 ;	main.c:772: P0_7 = 1;
                                   2282 ;	assignBit
      0007DE D2 87            [12] 2283 	setb	_P0_7
      0007E0                       2284 00127$:
                                   2285 ;	main.c:774: if (w==10)
      0007E0 74 0A            [12] 2286 	mov	a,#0x0a
      0007E2 B5*18 0B         [24] 2287 	cjne	a,_w,00129$
                                   2288 ;	main.c:778: display(digit2_5);
      0007E5 AE*10            [24] 2289 	mov	r6,_digit2_5
      0007E7 7F 00            [12] 2290 	mov	r7,#0x00
      0007E9 8E 82            [24] 2291 	mov	dpl,r6
      0007EB 8F 83            [24] 2292 	mov	dph,r7
      0007ED 12r00r51         [24] 2293 	lcall	_display
      0007F0                       2294 00129$:
                                   2295 ;	main.c:780: if (w==11)
      0007F0 74 0B            [12] 2296 	mov	a,#0x0b
      0007F2 B5*18 0B         [24] 2297 	cjne	a,_w,00131$
                                   2298 ;	main.c:784: display(digit2_6);
      0007F5 AE*11            [24] 2299 	mov	r6,_digit2_6
      0007F7 7F 00            [12] 2300 	mov	r7,#0x00
      0007F9 8E 82            [24] 2301 	mov	dpl,r6
      0007FB 8F 83            [24] 2302 	mov	dph,r7
      0007FD 12r00r51         [24] 2303 	lcall	_display
      000800                       2304 00131$:
                                   2305 ;	main.c:788: if (w==12)
      000800 74 0C            [12] 2306 	mov	a,#0x0c
      000802 B5*18 0B         [24] 2307 	cjne	a,_w,00133$
                                   2308 ;	main.c:792: display(digit2_1);
      000805 AE*0C            [24] 2309 	mov	r6,_digit2_1
      000807 7F 00            [12] 2310 	mov	r7,#0x00
      000809 8E 82            [24] 2311 	mov	dpl,r6
      00080B 8F 83            [24] 2312 	mov	dph,r7
      00080D 12r00r51         [24] 2313 	lcall	_display
      000810                       2314 00133$:
                                   2315 ;	main.c:794: if (w==13)
      000810 74 0D            [12] 2316 	mov	a,#0x0d
      000812 B5*18 0B         [24] 2317 	cjne	a,_w,00135$
                                   2318 ;	main.c:798: display(digit3_2);
      000815 AE*13            [24] 2319 	mov	r6,_digit3_2
      000817 7F 00            [12] 2320 	mov	r7,#0x00
      000819 8E 82            [24] 2321 	mov	dpl,r6
      00081B 8F 83            [24] 2322 	mov	dph,r7
      00081D 12r00r51         [24] 2323 	lcall	_display
      000820                       2324 00135$:
                                   2325 ;	main.c:800: if (w==14)
      000820 74 0E            [12] 2326 	mov	a,#0x0e
      000822 B5*18 0B         [24] 2327 	cjne	a,_w,00137$
                                   2328 ;	main.c:804: display(digit3_3);
      000825 AE*14            [24] 2329 	mov	r6,_digit3_3
      000827 7F 00            [12] 2330 	mov	r7,#0x00
      000829 8E 82            [24] 2331 	mov	dpl,r6
      00082B 8F 83            [24] 2332 	mov	dph,r7
      00082D 12r00r51         [24] 2333 	lcall	_display
      000830                       2334 00137$:
                                   2335 ;	main.c:806: if (w==15)
      000830 74 0F            [12] 2336 	mov	a,#0x0f
      000832 B5*18 0B         [24] 2337 	cjne	a,_w,00139$
                                   2338 ;	main.c:810: display(digit3_4);
      000835 AE*15            [24] 2339 	mov	r6,_digit3_4
      000837 7F 00            [12] 2340 	mov	r7,#0x00
      000839 8E 82            [24] 2341 	mov	dpl,r6
      00083B 8F 83            [24] 2342 	mov	dph,r7
      00083D 12r00r51         [24] 2343 	lcall	_display
      000840                       2344 00139$:
                                   2345 ;	main.c:813: if (w == 16)
      000840 74 10            [12] 2346 	mov	a,#0x10
      000842 B5*18 03         [24] 2347 	cjne	a,_w,00141$
                                   2348 ;	main.c:817: P0 = 0xFF;
      000845 75 80 FF         [24] 2349 	mov	_P0,#0xff
      000848                       2350 00141$:
                                   2351 ;	main.c:819: if (w<17)
      000848 74 EF            [12] 2352 	mov	a,#0x100 - 0x11
      00084A 25*18            [12] 2353 	add	a,_w
      00084C 40 02            [24] 2354 	jc	00143$
                                   2355 ;	main.c:821: w++;
      00084E 05*18            [12] 2356 	inc	_w
      000850                       2357 00143$:
                                   2358 ;	main.c:823: if (w>16)
      000850 E5*18            [12] 2359 	mov	a,_w
      000852 24 EF            [12] 2360 	add	a,#0xff - 0x10
      000854 50 03            [24] 2361 	jnc	00145$
                                   2362 ;	main.c:825: w=0;
      000856 75*18 00         [24] 2363 	mov	_w,#0x00
      000859                       2364 00145$:
                                   2365 ;	main.c:828: trigger = 0;
                                   2366 ;	assignBit
      000859 C2 C4            [12] 2367 	clr	_P4_4
                                   2368 ;	main.c:829: trigger = 1;
                                   2369 ;	assignBit
      00085B D2 C4            [12] 2370 	setb	_P4_4
                                   2371 ;	main.c:830: DelaySmalltest();
      00085D 12r00r11         [24] 2372 	lcall	_DelaySmalltest
                                   2373 ;	main.c:831: trigger = 0;
                                   2374 ;	assignBit
      000860 C2 C4            [12] 2375 	clr	_P4_4
                                   2376 ;	main.c:832: }
      000862 D0 D0            [24] 2377 	pop	psw
      000864 D0 00            [24] 2378 	pop	(0+0)
      000866 D0 01            [24] 2379 	pop	(0+1)
      000868 D0 02            [24] 2380 	pop	(0+2)
      00086A D0 03            [24] 2381 	pop	(0+3)
      00086C D0 04            [24] 2382 	pop	(0+4)
      00086E D0 05            [24] 2383 	pop	(0+5)
      000870 D0 06            [24] 2384 	pop	(0+6)
      000872 D0 07            [24] 2385 	pop	(0+7)
      000874 D0 83            [24] 2386 	pop	dph
      000876 D0 82            [24] 2387 	pop	dpl
      000878 D0 F0            [24] 2388 	pop	b
      00087A D0 E0            [24] 2389 	pop	acc
      00087C D0*00            [24] 2390 	pop	bits
      00087E 32               [24] 2391 	reti
                                   2392 ;------------------------------------------------------------
                                   2393 ;Allocation info for local variables in function 'adc_isr'
                                   2394 ;------------------------------------------------------------
                                   2395 ;	main.c:834: void adc_isr( ) __interrupt 5 __using 1
                                   2396 ;	-----------------------------------------
                                   2397 ;	 function adc_isr
                                   2398 ;	-----------------------------------------
      00087F                       2399 _adc_isr:
                           00000F  2400 	ar7 = 0x0f
                           00000E  2401 	ar6 = 0x0e
                           00000D  2402 	ar5 = 0x0d
                           00000C  2403 	ar4 = 0x0c
                           00000B  2404 	ar3 = 0x0b
                           00000A  2405 	ar2 = 0x0a
                           000009  2406 	ar1 = 0x09
                           000008  2407 	ar0 = 0x08
      00087F C0*00            [24] 2408 	push	bits
      000881 C0 E0            [24] 2409 	push	acc
      000883 C0 F0            [24] 2410 	push	b
      000885 C0 82            [24] 2411 	push	dpl
      000887 C0 83            [24] 2412 	push	dph
      000889 C0 07            [24] 2413 	push	(0+7)
      00088B C0 06            [24] 2414 	push	(0+6)
      00088D C0 05            [24] 2415 	push	(0+5)
      00088F C0 04            [24] 2416 	push	(0+4)
      000891 C0 03            [24] 2417 	push	(0+3)
      000893 C0 02            [24] 2418 	push	(0+2)
      000895 C0 01            [24] 2419 	push	(0+1)
      000897 C0 00            [24] 2420 	push	(0+0)
      000899 C0 D0            [24] 2421 	push	psw
      00089B 75 D0 08         [24] 2422 	mov	psw,#0x08
                                   2423 ;	main.c:836: ADC_CONTR &= !ADC_FLAG; //Clear ADC interrupt flag
      00089E E5 BC            [12] 2424 	mov	a,_ADC_CONTR
      0008A0 75 BC 00         [24] 2425 	mov	_ADC_CONTR,#0x00
                                   2426 ;	main.c:839: if (fuel < 0.1)
      0008A3 74 CD            [12] 2427 	mov	a,#0xcd
      0008A5 C0 E0            [24] 2428 	push	acc
      0008A7 14               [12] 2429 	dec	a
      0008A8 C0 E0            [24] 2430 	push	acc
      0008AA C0 E0            [24] 2431 	push	acc
      0008AC 74 3D            [12] 2432 	mov	a,#0x3d
      0008AE C0 E0            [24] 2433 	push	acc
      0008B0 85*41 82         [24] 2434 	mov	dpl,_fuel
      0008B3 85*42 83         [24] 2435 	mov	dph,(_fuel + 1)
      0008B6 85*43 F0         [24] 2436 	mov	b,(_fuel + 2)
      0008B9 E5*44            [12] 2437 	mov	a,(_fuel + 3)
      0008BB 75 D0 00         [24] 2438 	mov	psw,#0x00
      0008BE 12r00r00         [24] 2439 	lcall	___fslt
      0008C1 75 D0 08         [24] 2440 	mov	psw,#0x08
      0008C4 AF 82            [24] 2441 	mov	r7,dpl
      0008C6 E5 81            [12] 2442 	mov	a,sp
      0008C8 24 FC            [12] 2443 	add	a,#0xfc
      0008CA F5 81            [12] 2444 	mov	sp,a
      0008CC EF               [12] 2445 	mov	a,r7
      0008CD 60 0C            [24] 2446 	jz	00102$
                                   2447 ;	main.c:840: thrust = 0;
      0008CF E4               [12] 2448 	clr	a
      0008D0 F5*31            [12] 2449 	mov	_thrust,a
      0008D2 F5*32            [12] 2450 	mov	(_thrust + 1),a
      0008D4 F5*33            [12] 2451 	mov	(_thrust + 2),a
      0008D6 F5*34            [12] 2452 	mov	(_thrust + 3),a
      0008D8 02r09r5E         [24] 2453 	ljmp	00103$
      0008DB                       2454 00102$:
                                   2455 ;	main.c:844: thrust = (ADC_RES - 0) * (ship_thrust - 0) / (255 - 0);
      0008DB AE BD            [24] 2456 	mov	r6,_ADC_RES
      0008DD 7F 00            [12] 2457 	mov	r7,#0x00
      0008DF AA*35            [24] 2458 	mov	r2,_ship_thrust
      0008E1 AB*36            [24] 2459 	mov	r3,(_ship_thrust + 1)
      0008E3 AC*37            [24] 2460 	mov	r4,(_ship_thrust + 2)
      0008E5 AD*38            [24] 2461 	mov	r5,(_ship_thrust + 3)
      0008E7 8E 82            [24] 2462 	mov	dpl,r6
      0008E9 8F 83            [24] 2463 	mov	dph,r7
      0008EB C0 0D            [24] 2464 	push	ar5
      0008ED C0 0C            [24] 2465 	push	ar4
      0008EF C0 0B            [24] 2466 	push	ar3
      0008F1 C0 0A            [24] 2467 	push	ar2
      0008F3 75 D0 00         [24] 2468 	mov	psw,#0x00
      0008F6 12r00r00         [24] 2469 	lcall	___sint2fs
      0008F9 75 D0 08         [24] 2470 	mov	psw,#0x08
      0008FC A8 82            [24] 2471 	mov	r0,dpl
      0008FE A9 83            [24] 2472 	mov	r1,dph
      000900 AE F0            [24] 2473 	mov	r6,b
      000902 FF               [12] 2474 	mov	r7,a
      000903 D0 0A            [24] 2475 	pop	ar2
      000905 D0 0B            [24] 2476 	pop	ar3
      000907 D0 0C            [24] 2477 	pop	ar4
      000909 D0 0D            [24] 2478 	pop	ar5
      00090B C0 0A            [24] 2479 	push	ar2
      00090D C0 0B            [24] 2480 	push	ar3
      00090F C0 0C            [24] 2481 	push	ar4
      000911 C0 0D            [24] 2482 	push	ar5
      000913 88 82            [24] 2483 	mov	dpl,r0
      000915 89 83            [24] 2484 	mov	dph,r1
      000917 8E F0            [24] 2485 	mov	b,r6
      000919 EF               [12] 2486 	mov	a,r7
      00091A 75 D0 00         [24] 2487 	mov	psw,#0x00
      00091D 12r00r00         [24] 2488 	lcall	___fsmul
      000920 75 D0 08         [24] 2489 	mov	psw,#0x08
      000923 AC 82            [24] 2490 	mov	r4,dpl
      000925 AD 83            [24] 2491 	mov	r5,dph
      000927 AE F0            [24] 2492 	mov	r6,b
      000929 FF               [12] 2493 	mov	r7,a
      00092A E5 81            [12] 2494 	mov	a,sp
      00092C 24 FC            [12] 2495 	add	a,#0xfc
      00092E F5 81            [12] 2496 	mov	sp,a
      000930 E4               [12] 2497 	clr	a
      000931 C0 E0            [24] 2498 	push	acc
      000933 C0 E0            [24] 2499 	push	acc
      000935 74 7F            [12] 2500 	mov	a,#0x7f
      000937 C0 E0            [24] 2501 	push	acc
      000939 74 43            [12] 2502 	mov	a,#0x43
      00093B C0 E0            [24] 2503 	push	acc
      00093D 8C 82            [24] 2504 	mov	dpl,r4
      00093F 8D 83            [24] 2505 	mov	dph,r5
      000941 8E F0            [24] 2506 	mov	b,r6
      000943 EF               [12] 2507 	mov	a,r7
      000944 75 D0 00         [24] 2508 	mov	psw,#0x00
      000947 12r00r00         [24] 2509 	lcall	___fsdiv
      00094A 75 D0 08         [24] 2510 	mov	psw,#0x08
      00094D 85 82*31         [24] 2511 	mov	_thrust,dpl
      000950 85 83*32         [24] 2512 	mov	(_thrust + 1),dph
      000953 85 F0*33         [24] 2513 	mov	(_thrust + 2),b
      000956 F5*34            [12] 2514 	mov	(_thrust + 3),a
      000958 E5 81            [12] 2515 	mov	a,sp
      00095A 24 FC            [12] 2516 	add	a,#0xfc
      00095C F5 81            [12] 2517 	mov	sp,a
      00095E                       2518 00103$:
                                   2519 ;	main.c:850: ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ADC_START | 0;
      00095E 75 BC 88         [24] 2520 	mov	_ADC_CONTR,#0x88
                                   2521 ;	main.c:854: }
      000961 D0 D0            [24] 2522 	pop	psw
      000963 D0 00            [24] 2523 	pop	(0+0)
      000965 D0 01            [24] 2524 	pop	(0+1)
      000967 D0 02            [24] 2525 	pop	(0+2)
      000969 D0 03            [24] 2526 	pop	(0+3)
      00096B D0 04            [24] 2527 	pop	(0+4)
      00096D D0 05            [24] 2528 	pop	(0+5)
      00096F D0 06            [24] 2529 	pop	(0+6)
      000971 D0 07            [24] 2530 	pop	(0+7)
      000973 D0 83            [24] 2531 	pop	dph
      000975 D0 82            [24] 2532 	pop	dpl
      000977 D0 F0            [24] 2533 	pop	b
      000979 D0 E0            [24] 2534 	pop	acc
      00097B D0*00            [24] 2535 	pop	bits
      00097D 32               [24] 2536 	reti
                                   2537 ;------------------------------------------------------------
                                   2538 ;Allocation info for local variables in function 'timer1interrupt'
                                   2539 ;------------------------------------------------------------
                                   2540 ;b                         Allocated to registers r6 r7 
                                   2541 ;int_input                 Allocated to registers r4 r5 
                                   2542 ;number1                   Allocated to registers r6 r7 
                                   2543 ;number2                   Allocated to registers r4 r5 
                                   2544 ;------------------------------------------------------------
                                   2545 ;	main.c:856: void timer1interrupt(void) __interrupt 3
                                   2546 ;	-----------------------------------------
                                   2547 ;	 function timer1interrupt
                                   2548 ;	-----------------------------------------
      00097E                       2549 _timer1interrupt:
                           000007  2550 	ar7 = 0x07
                           000006  2551 	ar6 = 0x06
                           000005  2552 	ar5 = 0x05
                           000004  2553 	ar4 = 0x04
                           000003  2554 	ar3 = 0x03
                           000002  2555 	ar2 = 0x02
                           000001  2556 	ar1 = 0x01
                           000000  2557 	ar0 = 0x00
      00097E C0*00            [24] 2558 	push	bits
      000980 C0 E0            [24] 2559 	push	acc
      000982 C0 F0            [24] 2560 	push	b
      000984 C0 82            [24] 2561 	push	dpl
      000986 C0 83            [24] 2562 	push	dph
      000988 C0 07            [24] 2563 	push	(0+7)
      00098A C0 06            [24] 2564 	push	(0+6)
      00098C C0 05            [24] 2565 	push	(0+5)
      00098E C0 04            [24] 2566 	push	(0+4)
      000990 C0 03            [24] 2567 	push	(0+3)
      000992 C0 02            [24] 2568 	push	(0+2)
      000994 C0 01            [24] 2569 	push	(0+1)
      000996 C0 00            [24] 2570 	push	(0+0)
      000998 C0 D0            [24] 2571 	push	psw
      00099A 75 D0 00         [24] 2572 	mov	psw,#0x00
                                   2573 ;	main.c:862: TL1 = 0x00;		//Initial timer value
      00099D 75 8B 00         [24] 2574 	mov	_TL1,#0x00
                                   2575 ;	main.c:863: TH1 = 0x4C;		
      0009A0 75 8D 4C         [24] 2576 	mov	_TH1,#0x4c
                                   2577 ;	main.c:865: if (stormBit == 1)
      0009A3 74 01            [12] 2578 	mov	a,#0x01
      0009A5 B5*28 46         [24] 2579 	cjne	a,_stormBit,00102$
                                   2580 ;	main.c:867: EADC = 0;
                                   2581 ;	assignBit
      0009A8 C2 AD            [12] 2582 	clr	_EADC
                                   2583 ;	main.c:869: thrust = 0;
      0009AA E4               [12] 2584 	clr	a
      0009AB F5*31            [12] 2585 	mov	_thrust,a
      0009AD F5*32            [12] 2586 	mov	(_thrust + 1),a
      0009AF F5*33            [12] 2587 	mov	(_thrust + 2),a
      0009B1 F5*34            [12] 2588 	mov	(_thrust + 3),a
                                   2589 ;	main.c:871: a = ((float)rndNum) / 100.0;
      0009B3 85*16 82         [24] 2590 	mov	dpl,_rndNum
      0009B6 85*17 83         [24] 2591 	mov	dph,(_rndNum + 1)
      0009B9 12r00r00         [24] 2592 	lcall	___uint2fs
      0009BC AC 82            [24] 2593 	mov	r4,dpl
      0009BE AD 83            [24] 2594 	mov	r5,dph
      0009C0 AE F0            [24] 2595 	mov	r6,b
      0009C2 FF               [12] 2596 	mov	r7,a
      0009C3 E4               [12] 2597 	clr	a
      0009C4 C0 E0            [24] 2598 	push	acc
      0009C6 C0 E0            [24] 2599 	push	acc
      0009C8 74 C8            [12] 2600 	mov	a,#0xc8
      0009CA C0 E0            [24] 2601 	push	acc
      0009CC 74 42            [12] 2602 	mov	a,#0x42
      0009CE C0 E0            [24] 2603 	push	acc
      0009D0 8C 82            [24] 2604 	mov	dpl,r4
      0009D2 8D 83            [24] 2605 	mov	dph,r5
      0009D4 8E F0            [24] 2606 	mov	b,r6
      0009D6 EF               [12] 2607 	mov	a,r7
      0009D7 12r00r00         [24] 2608 	lcall	___fsdiv
      0009DA 85 82*51         [24] 2609 	mov	_a,dpl
      0009DD 85 83*52         [24] 2610 	mov	(_a + 1),dph
      0009E0 85 F0*53         [24] 2611 	mov	(_a + 2),b
      0009E3 F5*54            [12] 2612 	mov	(_a + 3),a
      0009E5 E5 81            [12] 2613 	mov	a,sp
      0009E7 24 FC            [12] 2614 	add	a,#0xfc
      0009E9 F5 81            [12] 2615 	mov	sp,a
      0009EB 02r0Ar91         [24] 2616 	ljmp	00103$
      0009EE                       2617 00102$:
                                   2618 ;	main.c:874: a = (1.2*thrust / (ship_mass + fuel) - gravity);
      0009EE C0*31            [24] 2619 	push	_thrust
      0009F0 C0*32            [24] 2620 	push	(_thrust + 1)
      0009F2 C0*33            [24] 2621 	push	(_thrust + 2)
      0009F4 C0*34            [24] 2622 	push	(_thrust + 3)
      0009F6 90 99 9A         [24] 2623 	mov	dptr,#0x999a
      0009F9 75 F0 99         [24] 2624 	mov	b,#0x99
      0009FC 74 3F            [12] 2625 	mov	a,#0x3f
      0009FE 12r00r00         [24] 2626 	lcall	___fsmul
      000A01 AC 82            [24] 2627 	mov	r4,dpl
      000A03 AD 83            [24] 2628 	mov	r5,dph
      000A05 AE F0            [24] 2629 	mov	r6,b
      000A07 FF               [12] 2630 	mov	r7,a
      000A08 E5 81            [12] 2631 	mov	a,sp
      000A0A 24 FC            [12] 2632 	add	a,#0xfc
      000A0C F5 81            [12] 2633 	mov	sp,a
      000A0E 90r06r53         [24] 2634 	mov	dptr,#_ship_mass
      000A11 E4               [12] 2635 	clr	a
      000A12 93               [24] 2636 	movc	a,@a+dptr
      000A13 F8               [12] 2637 	mov	r0,a
      000A14 74 01            [12] 2638 	mov	a,#0x01
      000A16 93               [24] 2639 	movc	a,@a+dptr
      000A17 F9               [12] 2640 	mov	r1,a
      000A18 74 02            [12] 2641 	mov	a,#0x02
      000A1A 93               [24] 2642 	movc	a,@a+dptr
      000A1B FA               [12] 2643 	mov	r2,a
      000A1C 74 03            [12] 2644 	mov	a,#0x03
      000A1E 93               [24] 2645 	movc	a,@a+dptr
      000A1F FB               [12] 2646 	mov	r3,a
      000A20 C0 07            [24] 2647 	push	ar7
      000A22 C0 06            [24] 2648 	push	ar6
      000A24 C0 05            [24] 2649 	push	ar5
      000A26 C0 04            [24] 2650 	push	ar4
      000A28 C0*41            [24] 2651 	push	_fuel
      000A2A C0*42            [24] 2652 	push	(_fuel + 1)
      000A2C C0*43            [24] 2653 	push	(_fuel + 2)
      000A2E C0*44            [24] 2654 	push	(_fuel + 3)
      000A30 88 82            [24] 2655 	mov	dpl,r0
      000A32 89 83            [24] 2656 	mov	dph,r1
      000A34 8A F0            [24] 2657 	mov	b,r2
      000A36 EB               [12] 2658 	mov	a,r3
      000A37 12r00r00         [24] 2659 	lcall	___fsadd
      000A3A A8 82            [24] 2660 	mov	r0,dpl
      000A3C A9 83            [24] 2661 	mov	r1,dph
      000A3E AA F0            [24] 2662 	mov	r2,b
      000A40 FB               [12] 2663 	mov	r3,a
      000A41 E5 81            [12] 2664 	mov	a,sp
      000A43 24 FC            [12] 2665 	add	a,#0xfc
      000A45 F5 81            [12] 2666 	mov	sp,a
      000A47 D0 04            [24] 2667 	pop	ar4
      000A49 D0 05            [24] 2668 	pop	ar5
      000A4B D0 06            [24] 2669 	pop	ar6
      000A4D D0 07            [24] 2670 	pop	ar7
      000A4F C0 00            [24] 2671 	push	ar0
      000A51 C0 01            [24] 2672 	push	ar1
      000A53 C0 02            [24] 2673 	push	ar2
      000A55 C0 03            [24] 2674 	push	ar3
      000A57 8C 82            [24] 2675 	mov	dpl,r4
      000A59 8D 83            [24] 2676 	mov	dph,r5
      000A5B 8E F0            [24] 2677 	mov	b,r6
      000A5D EF               [12] 2678 	mov	a,r7
      000A5E 12r00r00         [24] 2679 	lcall	___fsdiv
      000A61 AC 82            [24] 2680 	mov	r4,dpl
      000A63 AD 83            [24] 2681 	mov	r5,dph
      000A65 AE F0            [24] 2682 	mov	r6,b
      000A67 FF               [12] 2683 	mov	r7,a
      000A68 E5 81            [12] 2684 	mov	a,sp
      000A6A 24 FC            [12] 2685 	add	a,#0xfc
      000A6C F5 81            [12] 2686 	mov	sp,a
      000A6E C0*3D            [24] 2687 	push	_gravity
      000A70 C0*3E            [24] 2688 	push	(_gravity + 1)
      000A72 C0*3F            [24] 2689 	push	(_gravity + 2)
      000A74 C0*40            [24] 2690 	push	(_gravity + 3)
      000A76 8C 82            [24] 2691 	mov	dpl,r4
      000A78 8D 83            [24] 2692 	mov	dph,r5
      000A7A 8E F0            [24] 2693 	mov	b,r6
      000A7C EF               [12] 2694 	mov	a,r7
      000A7D 12r00r00         [24] 2695 	lcall	___fssub
      000A80 85 82*51         [24] 2696 	mov	_a,dpl
      000A83 85 83*52         [24] 2697 	mov	(_a + 1),dph
      000A86 85 F0*53         [24] 2698 	mov	(_a + 2),b
      000A89 F5*54            [12] 2699 	mov	(_a + 3),a
      000A8B E5 81            [12] 2700 	mov	a,sp
      000A8D 24 FC            [12] 2701 	add	a,#0xfc
      000A8F F5 81            [12] 2702 	mov	sp,a
      000A91                       2703 00103$:
                                   2704 ;	main.c:875: delta_v = delta_t * a;
      000A91 C0*51            [24] 2705 	push	_a
      000A93 C0*52            [24] 2706 	push	(_a + 1)
      000A95 C0*53            [24] 2707 	push	(_a + 2)
      000A97 C0*54            [24] 2708 	push	(_a + 3)
      000A99 85*4D 82         [24] 2709 	mov	dpl,_delta_t
      000A9C 85*4E 83         [24] 2710 	mov	dph,(_delta_t + 1)
      000A9F 85*4F F0         [24] 2711 	mov	b,(_delta_t + 2)
      000AA2 E5*50            [12] 2712 	mov	a,(_delta_t + 3)
      000AA4 12r00r00         [24] 2713 	lcall	___fsmul
      000AA7 85 82*45         [24] 2714 	mov	_delta_v,dpl
      000AAA 85 83*46         [24] 2715 	mov	(_delta_v + 1),dph
      000AAD 85 F0*47         [24] 2716 	mov	(_delta_v + 2),b
      000AB0 F5*48            [12] 2717 	mov	(_delta_v + 3),a
      000AB2 E5 81            [12] 2718 	mov	a,sp
      000AB4 24 FC            [12] 2719 	add	a,#0xfc
      000AB6 F5 81            [12] 2720 	mov	sp,a
                                   2721 ;	main.c:876: velocity = velocity + delta_v;
      000AB8 C0*45            [24] 2722 	push	_delta_v
      000ABA C0*46            [24] 2723 	push	(_delta_v + 1)
      000ABC C0*47            [24] 2724 	push	(_delta_v + 2)
      000ABE C0*48            [24] 2725 	push	(_delta_v + 3)
      000AC0 85*29 82         [24] 2726 	mov	dpl,_velocity
      000AC3 85*2A 83         [24] 2727 	mov	dph,(_velocity + 1)
      000AC6 85*2B F0         [24] 2728 	mov	b,(_velocity + 2)
      000AC9 E5*2C            [12] 2729 	mov	a,(_velocity + 3)
      000ACB 12r00r00         [24] 2730 	lcall	___fsadd
      000ACE 85 82*29         [24] 2731 	mov	_velocity,dpl
      000AD1 85 83*2A         [24] 2732 	mov	(_velocity + 1),dph
      000AD4 85 F0*2B         [24] 2733 	mov	(_velocity + 2),b
      000AD7 F5*2C            [12] 2734 	mov	(_velocity + 3),a
      000AD9 E5 81            [12] 2735 	mov	a,sp
      000ADB 24 FC            [12] 2736 	add	a,#0xfc
      000ADD F5 81            [12] 2737 	mov	sp,a
                                   2738 ;	main.c:877: delta_h = velocity * delta_t;
      000ADF C0*4D            [24] 2739 	push	_delta_t
      000AE1 C0*4E            [24] 2740 	push	(_delta_t + 1)
      000AE3 C0*4F            [24] 2741 	push	(_delta_t + 2)
      000AE5 C0*50            [24] 2742 	push	(_delta_t + 3)
      000AE7 85*29 82         [24] 2743 	mov	dpl,_velocity
      000AEA 85*2A 83         [24] 2744 	mov	dph,(_velocity + 1)
      000AED 85*2B F0         [24] 2745 	mov	b,(_velocity + 2)
      000AF0 E5*2C            [12] 2746 	mov	a,(_velocity + 3)
      000AF2 12r00r00         [24] 2747 	lcall	___fsmul
      000AF5 85 82*55         [24] 2748 	mov	_delta_h,dpl
      000AF8 85 83*56         [24] 2749 	mov	(_delta_h + 1),dph
      000AFB 85 F0*57         [24] 2750 	mov	(_delta_h + 2),b
      000AFE F5*58            [12] 2751 	mov	(_delta_h + 3),a
      000B00 E5 81            [12] 2752 	mov	a,sp
      000B02 24 FC            [12] 2753 	add	a,#0xfc
      000B04 F5 81            [12] 2754 	mov	sp,a
                                   2755 ;	main.c:878: height = height + delta_h;
      000B06 C0*55            [24] 2756 	push	_delta_h
      000B08 C0*56            [24] 2757 	push	(_delta_h + 1)
      000B0A C0*57            [24] 2758 	push	(_delta_h + 2)
      000B0C C0*58            [24] 2759 	push	(_delta_h + 3)
      000B0E 85*39 82         [24] 2760 	mov	dpl,_height
      000B11 85*3A 83         [24] 2761 	mov	dph,(_height + 1)
      000B14 85*3B F0         [24] 2762 	mov	b,(_height + 2)
      000B17 E5*3C            [12] 2763 	mov	a,(_height + 3)
      000B19 12r00r00         [24] 2764 	lcall	___fsadd
      000B1C 85 82*39         [24] 2765 	mov	_height,dpl
      000B1F 85 83*3A         [24] 2766 	mov	(_height + 1),dph
      000B22 85 F0*3B         [24] 2767 	mov	(_height + 2),b
      000B25 F5*3C            [12] 2768 	mov	(_height + 3),a
      000B27 E5 81            [12] 2769 	mov	a,sp
      000B29 24 FC            [12] 2770 	add	a,#0xfc
      000B2B F5 81            [12] 2771 	mov	sp,a
                                   2772 ;	main.c:879: if (fuel < 0.1)
      000B2D 74 CD            [12] 2773 	mov	a,#0xcd
      000B2F C0 E0            [24] 2774 	push	acc
      000B31 14               [12] 2775 	dec	a
      000B32 C0 E0            [24] 2776 	push	acc
      000B34 C0 E0            [24] 2777 	push	acc
      000B36 74 3D            [12] 2778 	mov	a,#0x3d
      000B38 C0 E0            [24] 2779 	push	acc
      000B3A 85*41 82         [24] 2780 	mov	dpl,_fuel
      000B3D 85*42 83         [24] 2781 	mov	dph,(_fuel + 1)
      000B40 85*43 F0         [24] 2782 	mov	b,(_fuel + 2)
      000B43 E5*44            [12] 2783 	mov	a,(_fuel + 3)
      000B45 12r00r00         [24] 2784 	lcall	___fslt
      000B48 AF 82            [24] 2785 	mov	r7,dpl
      000B4A E5 81            [12] 2786 	mov	a,sp
      000B4C 24 FC            [12] 2787 	add	a,#0xfc
      000B4E F5 81            [12] 2788 	mov	sp,a
      000B50 EF               [12] 2789 	mov	a,r7
      000B51 60 0B            [24] 2790 	jz	00105$
                                   2791 ;	main.c:880: fuel = 0.0;
      000B53 E4               [12] 2792 	clr	a
      000B54 F5*41            [12] 2793 	mov	_fuel,a
      000B56 F5*42            [12] 2794 	mov	(_fuel + 1),a
      000B58 F5*43            [12] 2795 	mov	(_fuel + 2),a
      000B5A F5*44            [12] 2796 	mov	(_fuel + 3),a
      000B5C 80 52            [24] 2797 	sjmp	00106$
      000B5E                       2798 00105$:
                                   2799 ;	main.c:882: fuel = fuel-(thrust/20000000);
      000B5E 74 80            [12] 2800 	mov	a,#0x80
      000B60 C0 E0            [24] 2801 	push	acc
      000B62 74 96            [12] 2802 	mov	a,#0x96
      000B64 C0 E0            [24] 2803 	push	acc
      000B66 74 98            [12] 2804 	mov	a,#0x98
      000B68 C0 E0            [24] 2805 	push	acc
      000B6A 74 4B            [12] 2806 	mov	a,#0x4b
      000B6C C0 E0            [24] 2807 	push	acc
      000B6E 85*31 82         [24] 2808 	mov	dpl,_thrust
      000B71 85*32 83         [24] 2809 	mov	dph,(_thrust + 1)
      000B74 85*33 F0         [24] 2810 	mov	b,(_thrust + 2)
      000B77 E5*34            [12] 2811 	mov	a,(_thrust + 3)
      000B79 12r00r00         [24] 2812 	lcall	___fsdiv
      000B7C AC 82            [24] 2813 	mov	r4,dpl
      000B7E AD 83            [24] 2814 	mov	r5,dph
      000B80 AE F0            [24] 2815 	mov	r6,b
      000B82 FF               [12] 2816 	mov	r7,a
      000B83 E5 81            [12] 2817 	mov	a,sp
      000B85 24 FC            [12] 2818 	add	a,#0xfc
      000B87 F5 81            [12] 2819 	mov	sp,a
      000B89 C0 04            [24] 2820 	push	ar4
      000B8B C0 05            [24] 2821 	push	ar5
      000B8D C0 06            [24] 2822 	push	ar6
      000B8F C0 07            [24] 2823 	push	ar7
      000B91 85*41 82         [24] 2824 	mov	dpl,_fuel
      000B94 85*42 83         [24] 2825 	mov	dph,(_fuel + 1)
      000B97 85*43 F0         [24] 2826 	mov	b,(_fuel + 2)
      000B9A E5*44            [12] 2827 	mov	a,(_fuel + 3)
      000B9C 12r00r00         [24] 2828 	lcall	___fssub
      000B9F 85 82*41         [24] 2829 	mov	_fuel,dpl
      000BA2 85 83*42         [24] 2830 	mov	(_fuel + 1),dph
      000BA5 85 F0*43         [24] 2831 	mov	(_fuel + 2),b
      000BA8 F5*44            [12] 2832 	mov	(_fuel + 3),a
      000BAA E5 81            [12] 2833 	mov	a,sp
      000BAC 24 FC            [12] 2834 	add	a,#0xfc
      000BAE F5 81            [12] 2835 	mov	sp,a
      000BB0                       2836 00106$:
                                   2837 ;	main.c:885: if (velocity < 0)
      000BB0 E4               [12] 2838 	clr	a
      000BB1 C0 E0            [24] 2839 	push	acc
      000BB3 C0 E0            [24] 2840 	push	acc
      000BB5 C0 E0            [24] 2841 	push	acc
      000BB7 C0 E0            [24] 2842 	push	acc
      000BB9 85*29 82         [24] 2843 	mov	dpl,_velocity
      000BBC 85*2A 83         [24] 2844 	mov	dph,(_velocity + 1)
      000BBF 85*2B F0         [24] 2845 	mov	b,(_velocity + 2)
      000BC2 E5*2C            [12] 2846 	mov	a,(_velocity + 3)
      000BC4 12r00r00         [24] 2847 	lcall	___fslt
      000BC7 AF 82            [24] 2848 	mov	r7,dpl
      000BC9 E5 81            [12] 2849 	mov	a,sp
      000BCB 24 FC            [12] 2850 	add	a,#0xfc
      000BCD F5 81            [12] 2851 	mov	sp,a
      000BCF EF               [12] 2852 	mov	a,r7
      000BD0 60 33            [24] 2853 	jz	00108$
                                   2854 ;	main.c:887: digit1_1 = 11;
      000BD2 75*07 0B         [24] 2855 	mov	_digit1_1,#0x0b
                                   2856 ;	main.c:888: number1 = velocity*-10;
      000BD5 C0*29            [24] 2857 	push	_velocity
      000BD7 C0*2A            [24] 2858 	push	(_velocity + 1)
      000BD9 C0*2B            [24] 2859 	push	(_velocity + 2)
      000BDB C0*2C            [24] 2860 	push	(_velocity + 3)
      000BDD 90 00 00         [24] 2861 	mov	dptr,#0x0000
      000BE0 75 F0 20         [24] 2862 	mov	b,#0x20
      000BE3 74 C1            [12] 2863 	mov	a,#0xc1
      000BE5 12r00r00         [24] 2864 	lcall	___fsmul
      000BE8 AC 82            [24] 2865 	mov	r4,dpl
      000BEA AD 83            [24] 2866 	mov	r5,dph
      000BEC AE F0            [24] 2867 	mov	r6,b
      000BEE FF               [12] 2868 	mov	r7,a
      000BEF E5 81            [12] 2869 	mov	a,sp
      000BF1 24 FC            [12] 2870 	add	a,#0xfc
      000BF3 F5 81            [12] 2871 	mov	sp,a
      000BF5 8C 82            [24] 2872 	mov	dpl,r4
      000BF7 8D 83            [24] 2873 	mov	dph,r5
      000BF9 8E F0            [24] 2874 	mov	b,r6
      000BFB EF               [12] 2875 	mov	a,r7
      000BFC 12r00r00         [24] 2876 	lcall	___fs2sint
      000BFF AE 82            [24] 2877 	mov	r6,dpl
      000C01 AF 83            [24] 2878 	mov	r7,dph
      000C03 80 31            [24] 2879 	sjmp	00109$
      000C05                       2880 00108$:
                                   2881 ;	main.c:892: digit1_1 = 10;
      000C05 75*07 0A         [24] 2882 	mov	_digit1_1,#0x0a
                                   2883 ;	main.c:893: number1 = velocity*10;
      000C08 C0*29            [24] 2884 	push	_velocity
      000C0A C0*2A            [24] 2885 	push	(_velocity + 1)
      000C0C C0*2B            [24] 2886 	push	(_velocity + 2)
      000C0E C0*2C            [24] 2887 	push	(_velocity + 3)
      000C10 90 00 00         [24] 2888 	mov	dptr,#0x0000
      000C13 75 F0 20         [24] 2889 	mov	b,#0x20
      000C16 74 41            [12] 2890 	mov	a,#0x41
      000C18 12r00r00         [24] 2891 	lcall	___fsmul
      000C1B AA 82            [24] 2892 	mov	r2,dpl
      000C1D AB 83            [24] 2893 	mov	r3,dph
      000C1F AC F0            [24] 2894 	mov	r4,b
      000C21 FD               [12] 2895 	mov	r5,a
      000C22 E5 81            [12] 2896 	mov	a,sp
      000C24 24 FC            [12] 2897 	add	a,#0xfc
      000C26 F5 81            [12] 2898 	mov	sp,a
      000C28 8A 82            [24] 2899 	mov	dpl,r2
      000C2A 8B 83            [24] 2900 	mov	dph,r3
      000C2C 8C F0            [24] 2901 	mov	b,r4
      000C2E ED               [12] 2902 	mov	a,r5
      000C2F 12r00r00         [24] 2903 	lcall	___fs2sint
      000C32 AE 82            [24] 2904 	mov	r6,dpl
      000C34 AF 83            [24] 2905 	mov	r7,dph
      000C36                       2906 00109$:
                                   2907 ;	main.c:895: if (a < 0)
      000C36 C0 07            [24] 2908 	push	ar7
      000C38 C0 06            [24] 2909 	push	ar6
      000C3A E4               [12] 2910 	clr	a
      000C3B C0 E0            [24] 2911 	push	acc
      000C3D C0 E0            [24] 2912 	push	acc
      000C3F C0 E0            [24] 2913 	push	acc
      000C41 C0 E0            [24] 2914 	push	acc
      000C43 85*51 82         [24] 2915 	mov	dpl,_a
      000C46 85*52 83         [24] 2916 	mov	dph,(_a + 1)
      000C49 85*53 F0         [24] 2917 	mov	b,(_a + 2)
      000C4C E5*54            [12] 2918 	mov	a,(_a + 3)
      000C4E 12r00r00         [24] 2919 	lcall	___fslt
      000C51 AD 82            [24] 2920 	mov	r5,dpl
      000C53 E5 81            [12] 2921 	mov	a,sp
      000C55 24 FC            [12] 2922 	add	a,#0xfc
      000C57 F5 81            [12] 2923 	mov	sp,a
      000C59 D0 06            [24] 2924 	pop	ar6
      000C5B D0 07            [24] 2925 	pop	ar7
      000C5D ED               [12] 2926 	mov	a,r5
      000C5E 60 3B            [24] 2927 	jz	00111$
                                   2928 ;	main.c:897: digit2_1 = 11;
      000C60 75*0C 0B         [24] 2929 	mov	_digit2_1,#0x0b
                                   2930 ;	main.c:898: number2 = a*-100;
      000C63 C0 07            [24] 2931 	push	ar7
      000C65 C0 06            [24] 2932 	push	ar6
      000C67 C0*51            [24] 2933 	push	_a
      000C69 C0*52            [24] 2934 	push	(_a + 1)
      000C6B C0*53            [24] 2935 	push	(_a + 2)
      000C6D C0*54            [24] 2936 	push	(_a + 3)
      000C6F 90 00 00         [24] 2937 	mov	dptr,#0x0000
      000C72 75 F0 C8         [24] 2938 	mov	b,#0xc8
      000C75 74 C2            [12] 2939 	mov	a,#0xc2
      000C77 12r00r00         [24] 2940 	lcall	___fsmul
      000C7A AA 82            [24] 2941 	mov	r2,dpl
      000C7C AB 83            [24] 2942 	mov	r3,dph
      000C7E AC F0            [24] 2943 	mov	r4,b
      000C80 FD               [12] 2944 	mov	r5,a
      000C81 E5 81            [12] 2945 	mov	a,sp
      000C83 24 FC            [12] 2946 	add	a,#0xfc
      000C85 F5 81            [12] 2947 	mov	sp,a
      000C87 8A 82            [24] 2948 	mov	dpl,r2
      000C89 8B 83            [24] 2949 	mov	dph,r3
      000C8B 8C F0            [24] 2950 	mov	b,r4
      000C8D ED               [12] 2951 	mov	a,r5
      000C8E 12r00r00         [24] 2952 	lcall	___fs2sint
      000C91 AC 82            [24] 2953 	mov	r4,dpl
      000C93 AD 83            [24] 2954 	mov	r5,dph
      000C95 D0 06            [24] 2955 	pop	ar6
      000C97 D0 07            [24] 2956 	pop	ar7
      000C99 80 39            [24] 2957 	sjmp	00112$
      000C9B                       2958 00111$:
                                   2959 ;	main.c:902: digit2_1 = 10;
      000C9B 75*0C 0A         [24] 2960 	mov	_digit2_1,#0x0a
                                   2961 ;	main.c:903: number2 = a*100;
      000C9E C0 07            [24] 2962 	push	ar7
      000CA0 C0 06            [24] 2963 	push	ar6
      000CA2 C0*51            [24] 2964 	push	_a
      000CA4 C0*52            [24] 2965 	push	(_a + 1)
      000CA6 C0*53            [24] 2966 	push	(_a + 2)
      000CA8 C0*54            [24] 2967 	push	(_a + 3)
      000CAA 90 00 00         [24] 2968 	mov	dptr,#0x0000
      000CAD 75 F0 C8         [24] 2969 	mov	b,#0xc8
      000CB0 74 42            [12] 2970 	mov	a,#0x42
      000CB2 12r00r00         [24] 2971 	lcall	___fsmul
      000CB5 A8 82            [24] 2972 	mov	r0,dpl
      000CB7 A9 83            [24] 2973 	mov	r1,dph
      000CB9 AA F0            [24] 2974 	mov	r2,b
      000CBB FB               [12] 2975 	mov	r3,a
      000CBC E5 81            [12] 2976 	mov	a,sp
      000CBE 24 FC            [12] 2977 	add	a,#0xfc
      000CC0 F5 81            [12] 2978 	mov	sp,a
      000CC2 88 82            [24] 2979 	mov	dpl,r0
      000CC4 89 83            [24] 2980 	mov	dph,r1
      000CC6 8A F0            [24] 2981 	mov	b,r2
      000CC8 EB               [12] 2982 	mov	a,r3
      000CC9 12r00r00         [24] 2983 	lcall	___fs2sint
      000CCC AC 82            [24] 2984 	mov	r4,dpl
      000CCE AD 83            [24] 2985 	mov	r5,dph
      000CD0 D0 06            [24] 2986 	pop	ar6
      000CD2 D0 07            [24] 2987 	pop	ar7
      000CD4                       2988 00112$:
                                   2989 ;	main.c:907: int_input = (int) height;
      000CD4 85*39 82         [24] 2990 	mov	dpl,_height
      000CD7 85*3A 83         [24] 2991 	mov	dph,(_height + 1)
      000CDA 85*3B F0         [24] 2992 	mov	b,(_height + 2)
      000CDD E5*3C            [12] 2993 	mov	a,(_height + 3)
      000CDF C0 07            [24] 2994 	push	ar7
      000CE1 C0 06            [24] 2995 	push	ar6
      000CE3 C0 05            [24] 2996 	push	ar5
      000CE5 C0 04            [24] 2997 	push	ar4
      000CE7 12r00r00         [24] 2998 	lcall	___fs2sint
                                   2999 ;	main.c:909: digit4 = int_input % 10;
      000CEA AA 82            [24] 3000 	mov	r2,dpl
      000CEC AB 83            [24] 3001 	mov	r3,dph
      000CEE 75*00 0A         [24] 3002 	mov	__moduint_PARM_2,#0x0a
      000CF1 75*01 00         [24] 3003 	mov	(__moduint_PARM_2 + 1),#0x00
      000CF4 C0 03            [24] 3004 	push	ar3
      000CF6 C0 02            [24] 3005 	push	ar2
      000CF8 12r00r00         [24] 3006 	lcall	__moduint
      000CFB A8 82            [24] 3007 	mov	r0,dpl
      000CFD D0 02            [24] 3008 	pop	ar2
      000CFF D0 03            [24] 3009 	pop	ar3
      000D01 88*06            [24] 3010 	mov	_digit4,r0
                                   3011 ;	main.c:910: b = int_input / 10;
      000D03 75*00 0A         [24] 3012 	mov	__divuint_PARM_2,#0x0a
      000D06 75*01 00         [24] 3013 	mov	(__divuint_PARM_2 + 1),#0x00
      000D09 8A 82            [24] 3014 	mov	dpl,r2
      000D0B 8B 83            [24] 3015 	mov	dph,r3
      000D0D 12r00r00         [24] 3016 	lcall	__divuint
                                   3017 ;	main.c:912: digit3 = b % 10;
      000D10 AA 82            [24] 3018 	mov	r2,dpl
      000D12 AB 83            [24] 3019 	mov	r3,dph
      000D14 75*00 0A         [24] 3020 	mov	__moduint_PARM_2,#0x0a
      000D17 75*01 00         [24] 3021 	mov	(__moduint_PARM_2 + 1),#0x00
      000D1A C0 03            [24] 3022 	push	ar3
      000D1C C0 02            [24] 3023 	push	ar2
      000D1E 12r00r00         [24] 3024 	lcall	__moduint
      000D21 A8 82            [24] 3025 	mov	r0,dpl
      000D23 D0 02            [24] 3026 	pop	ar2
      000D25 D0 03            [24] 3027 	pop	ar3
      000D27 88*05            [24] 3028 	mov	_digit3,r0
                                   3029 ;	main.c:913: b = b / 10;
      000D29 75*00 0A         [24] 3030 	mov	__divuint_PARM_2,#0x0a
      000D2C 75*01 00         [24] 3031 	mov	(__divuint_PARM_2 + 1),#0x00
      000D2F 8A 82            [24] 3032 	mov	dpl,r2
      000D31 8B 83            [24] 3033 	mov	dph,r3
      000D33 12r00r00         [24] 3034 	lcall	__divuint
                                   3035 ;	main.c:915: digit2 = b % 10;
      000D36 AA 82            [24] 3036 	mov	r2,dpl
      000D38 AB 83            [24] 3037 	mov	r3,dph
      000D3A 75*00 0A         [24] 3038 	mov	__moduint_PARM_2,#0x0a
      000D3D 75*01 00         [24] 3039 	mov	(__moduint_PARM_2 + 1),#0x00
      000D40 C0 03            [24] 3040 	push	ar3
      000D42 C0 02            [24] 3041 	push	ar2
      000D44 12r00r00         [24] 3042 	lcall	__moduint
      000D47 A8 82            [24] 3043 	mov	r0,dpl
      000D49 D0 02            [24] 3044 	pop	ar2
      000D4B D0 03            [24] 3045 	pop	ar3
      000D4D 88*04            [24] 3046 	mov	_digit2,r0
                                   3047 ;	main.c:916: b = b / 10;
      000D4F 75*00 0A         [24] 3048 	mov	__divuint_PARM_2,#0x0a
      000D52 75*01 00         [24] 3049 	mov	(__divuint_PARM_2 + 1),#0x00
      000D55 8A 82            [24] 3050 	mov	dpl,r2
      000D57 8B 83            [24] 3051 	mov	dph,r3
      000D59 12r00r00         [24] 3052 	lcall	__divuint
      000D5C AA 82            [24] 3053 	mov	r2,dpl
      000D5E D0 04            [24] 3054 	pop	ar4
      000D60 D0 05            [24] 3055 	pop	ar5
      000D62 D0 06            [24] 3056 	pop	ar6
      000D64 D0 07            [24] 3057 	pop	ar7
                                   3058 ;	main.c:918: digit1 = (int)b;
      000D66 8A*03            [24] 3059 	mov	_digit1,r2
                                   3060 ;	main.c:921: int_input = (int) (number1);
                                   3061 ;	main.c:923: digit1_5= int_input % 10;
      000D68 75*00 0A         [24] 3062 	mov	__moduint_PARM_2,#0x0a
      000D6B 75*01 00         [24] 3063 	mov	(__moduint_PARM_2 + 1),#0x00
      000D6E 8E 82            [24] 3064 	mov	dpl,r6
      000D70 8F 83            [24] 3065 	mov	dph,r7
      000D72 C0 07            [24] 3066 	push	ar7
      000D74 C0 06            [24] 3067 	push	ar6
      000D76 C0 05            [24] 3068 	push	ar5
      000D78 C0 04            [24] 3069 	push	ar4
      000D7A 12r00r00         [24] 3070 	lcall	__moduint
      000D7D AA 82            [24] 3071 	mov	r2,dpl
      000D7F D0 04            [24] 3072 	pop	ar4
      000D81 D0 05            [24] 3073 	pop	ar5
      000D83 D0 06            [24] 3074 	pop	ar6
      000D85 D0 07            [24] 3075 	pop	ar7
      000D87 8A*0B            [24] 3076 	mov	_digit1_5,r2
                                   3077 ;	main.c:924: b = int_input / 10;
      000D89 75*00 0A         [24] 3078 	mov	__divuint_PARM_2,#0x0a
      000D8C 75*01 00         [24] 3079 	mov	(__divuint_PARM_2 + 1),#0x00
      000D8F 8E 82            [24] 3080 	mov	dpl,r6
      000D91 8F 83            [24] 3081 	mov	dph,r7
      000D93 C0 05            [24] 3082 	push	ar5
      000D95 C0 04            [24] 3083 	push	ar4
      000D97 12r00r00         [24] 3084 	lcall	__divuint
      000D9A AE 82            [24] 3085 	mov	r6,dpl
      000D9C AF 83            [24] 3086 	mov	r7,dph
      000D9E D0 04            [24] 3087 	pop	ar4
      000DA0 D0 05            [24] 3088 	pop	ar5
                                   3089 ;	main.c:926: digit1_4 = b % 10;
      000DA2 75*00 0A         [24] 3090 	mov	__moduint_PARM_2,#0x0a
      000DA5 75*01 00         [24] 3091 	mov	(__moduint_PARM_2 + 1),#0x00
      000DA8 8E 82            [24] 3092 	mov	dpl,r6
      000DAA 8F 83            [24] 3093 	mov	dph,r7
      000DAC C0 07            [24] 3094 	push	ar7
      000DAE C0 06            [24] 3095 	push	ar6
      000DB0 C0 05            [24] 3096 	push	ar5
      000DB2 C0 04            [24] 3097 	push	ar4
      000DB4 12r00r00         [24] 3098 	lcall	__moduint
      000DB7 AA 82            [24] 3099 	mov	r2,dpl
      000DB9 D0 04            [24] 3100 	pop	ar4
      000DBB D0 05            [24] 3101 	pop	ar5
      000DBD D0 06            [24] 3102 	pop	ar6
      000DBF D0 07            [24] 3103 	pop	ar7
      000DC1 8A*0A            [24] 3104 	mov	_digit1_4,r2
                                   3105 ;	main.c:927: b = b / 10;
      000DC3 75*00 0A         [24] 3106 	mov	__divuint_PARM_2,#0x0a
      000DC6 75*01 00         [24] 3107 	mov	(__divuint_PARM_2 + 1),#0x00
      000DC9 8E 82            [24] 3108 	mov	dpl,r6
      000DCB 8F 83            [24] 3109 	mov	dph,r7
      000DCD C0 05            [24] 3110 	push	ar5
      000DCF C0 04            [24] 3111 	push	ar4
      000DD1 12r00r00         [24] 3112 	lcall	__divuint
      000DD4 AE 82            [24] 3113 	mov	r6,dpl
      000DD6 AF 83            [24] 3114 	mov	r7,dph
      000DD8 D0 04            [24] 3115 	pop	ar4
      000DDA D0 05            [24] 3116 	pop	ar5
                                   3117 ;	main.c:929: digit1_3 = b % 10;
      000DDC 75*00 0A         [24] 3118 	mov	__moduint_PARM_2,#0x0a
      000DDF 75*01 00         [24] 3119 	mov	(__moduint_PARM_2 + 1),#0x00
      000DE2 8E 82            [24] 3120 	mov	dpl,r6
      000DE4 8F 83            [24] 3121 	mov	dph,r7
      000DE6 C0 07            [24] 3122 	push	ar7
      000DE8 C0 06            [24] 3123 	push	ar6
      000DEA C0 05            [24] 3124 	push	ar5
      000DEC C0 04            [24] 3125 	push	ar4
      000DEE 12r00r00         [24] 3126 	lcall	__moduint
      000DF1 AA 82            [24] 3127 	mov	r2,dpl
      000DF3 D0 04            [24] 3128 	pop	ar4
      000DF5 D0 05            [24] 3129 	pop	ar5
      000DF7 D0 06            [24] 3130 	pop	ar6
      000DF9 D0 07            [24] 3131 	pop	ar7
      000DFB 8A*09            [24] 3132 	mov	_digit1_3,r2
                                   3133 ;	main.c:930: b = b / 10;
      000DFD 75*00 0A         [24] 3134 	mov	__divuint_PARM_2,#0x0a
      000E00 75*01 00         [24] 3135 	mov	(__divuint_PARM_2 + 1),#0x00
      000E03 8E 82            [24] 3136 	mov	dpl,r6
      000E05 8F 83            [24] 3137 	mov	dph,r7
      000E07 C0 05            [24] 3138 	push	ar5
      000E09 C0 04            [24] 3139 	push	ar4
      000E0B 12r00r00         [24] 3140 	lcall	__divuint
                                   3141 ;	main.c:932: digit1_2 = b % 10;
      000E0E 75*00 0A         [24] 3142 	mov	__moduint_PARM_2,#0x0a
      000E11 75*01 00         [24] 3143 	mov	(__moduint_PARM_2 + 1),#0x00
      000E14 12r00r00         [24] 3144 	lcall	__moduint
      000E17 AE 82            [24] 3145 	mov	r6,dpl
      000E19 D0 04            [24] 3146 	pop	ar4
      000E1B D0 05            [24] 3147 	pop	ar5
      000E1D 8E*08            [24] 3148 	mov	_digit1_2,r6
                                   3149 ;	main.c:938: int_input = (int) number2;
                                   3150 ;	main.c:940: digit2_6= int_input % 10;
      000E1F 75*00 0A         [24] 3151 	mov	__moduint_PARM_2,#0x0a
      000E22 75*01 00         [24] 3152 	mov	(__moduint_PARM_2 + 1),#0x00
      000E25 8C 82            [24] 3153 	mov	dpl,r4
      000E27 8D 83            [24] 3154 	mov	dph,r5
      000E29 C0 05            [24] 3155 	push	ar5
      000E2B C0 04            [24] 3156 	push	ar4
      000E2D 12r00r00         [24] 3157 	lcall	__moduint
      000E30 AE 82            [24] 3158 	mov	r6,dpl
      000E32 D0 04            [24] 3159 	pop	ar4
      000E34 D0 05            [24] 3160 	pop	ar5
      000E36 8E*11            [24] 3161 	mov	_digit2_6,r6
                                   3162 ;	main.c:941: b = int_input / 10;
      000E38 75*00 0A         [24] 3163 	mov	__divuint_PARM_2,#0x0a
      000E3B 75*01 00         [24] 3164 	mov	(__divuint_PARM_2 + 1),#0x00
      000E3E 8C 82            [24] 3165 	mov	dpl,r4
      000E40 8D 83            [24] 3166 	mov	dph,r5
      000E42 12r00r00         [24] 3167 	lcall	__divuint
                                   3168 ;	main.c:943: digit2_5 = b % 10;
      000E45 AE 82            [24] 3169 	mov	r6,dpl
      000E47 AF 83            [24] 3170 	mov	r7,dph
      000E49 75*00 0A         [24] 3171 	mov	__moduint_PARM_2,#0x0a
      000E4C 75*01 00         [24] 3172 	mov	(__moduint_PARM_2 + 1),#0x00
      000E4F C0 07            [24] 3173 	push	ar7
      000E51 C0 06            [24] 3174 	push	ar6
      000E53 12r00r00         [24] 3175 	lcall	__moduint
      000E56 AC 82            [24] 3176 	mov	r4,dpl
      000E58 D0 06            [24] 3177 	pop	ar6
      000E5A D0 07            [24] 3178 	pop	ar7
      000E5C 8C*10            [24] 3179 	mov	_digit2_5,r4
                                   3180 ;	main.c:944: b = b / 10;
      000E5E 75*00 0A         [24] 3181 	mov	__divuint_PARM_2,#0x0a
      000E61 75*01 00         [24] 3182 	mov	(__divuint_PARM_2 + 1),#0x00
      000E64 8E 82            [24] 3183 	mov	dpl,r6
      000E66 8F 83            [24] 3184 	mov	dph,r7
      000E68 12r00r00         [24] 3185 	lcall	__divuint
                                   3186 ;	main.c:946: digit2_4 = b % 10;
      000E6B AE 82            [24] 3187 	mov	r6,dpl
      000E6D AF 83            [24] 3188 	mov	r7,dph
      000E6F 75*00 0A         [24] 3189 	mov	__moduint_PARM_2,#0x0a
      000E72 75*01 00         [24] 3190 	mov	(__moduint_PARM_2 + 1),#0x00
      000E75 C0 07            [24] 3191 	push	ar7
      000E77 C0 06            [24] 3192 	push	ar6
      000E79 12r00r00         [24] 3193 	lcall	__moduint
      000E7C AC 82            [24] 3194 	mov	r4,dpl
      000E7E D0 06            [24] 3195 	pop	ar6
      000E80 D0 07            [24] 3196 	pop	ar7
      000E82 8C*0F            [24] 3197 	mov	_digit2_4,r4
                                   3198 ;	main.c:947: b = b / 10;
      000E84 75*00 0A         [24] 3199 	mov	__divuint_PARM_2,#0x0a
      000E87 75*01 00         [24] 3200 	mov	(__divuint_PARM_2 + 1),#0x00
      000E8A 8E 82            [24] 3201 	mov	dpl,r6
      000E8C 8F 83            [24] 3202 	mov	dph,r7
      000E8E 12r00r00         [24] 3203 	lcall	__divuint
                                   3204 ;	main.c:949: digit2_3 = b % 10;
      000E91 AE 82            [24] 3205 	mov	r6,dpl
      000E93 AF 83            [24] 3206 	mov	r7,dph
      000E95 75*00 0A         [24] 3207 	mov	__moduint_PARM_2,#0x0a
      000E98 75*01 00         [24] 3208 	mov	(__moduint_PARM_2 + 1),#0x00
      000E9B C0 07            [24] 3209 	push	ar7
      000E9D C0 06            [24] 3210 	push	ar6
      000E9F 12r00r00         [24] 3211 	lcall	__moduint
      000EA2 AC 82            [24] 3212 	mov	r4,dpl
      000EA4 D0 06            [24] 3213 	pop	ar6
      000EA6 D0 07            [24] 3214 	pop	ar7
      000EA8 8C*0E            [24] 3215 	mov	_digit2_3,r4
                                   3216 ;	main.c:950: b = b / 10;
      000EAA 75*00 0A         [24] 3217 	mov	__divuint_PARM_2,#0x0a
      000EAD 75*01 00         [24] 3218 	mov	(__divuint_PARM_2 + 1),#0x00
      000EB0 8E 82            [24] 3219 	mov	dpl,r6
      000EB2 8F 83            [24] 3220 	mov	dph,r7
      000EB4 12r00r00         [24] 3221 	lcall	__divuint
                                   3222 ;	main.c:952: digit2_2 = b % 10;
      000EB7 75*00 0A         [24] 3223 	mov	__moduint_PARM_2,#0x0a
      000EBA 75*01 00         [24] 3224 	mov	(__moduint_PARM_2 + 1),#0x00
      000EBD 12r00r00         [24] 3225 	lcall	__moduint
      000EC0 AE 82            [24] 3226 	mov	r6,dpl
      000EC2 8E*0D            [24] 3227 	mov	_digit2_2,r6
                                   3228 ;	main.c:959: int_input = (int) ((fuel/8.2)*100);
      000EC4 74 33            [12] 3229 	mov	a,#0x33
      000EC6 C0 E0            [24] 3230 	push	acc
      000EC8 C0 E0            [24] 3231 	push	acc
      000ECA 74 03            [12] 3232 	mov	a,#0x03
      000ECC C0 E0            [24] 3233 	push	acc
      000ECE 74 41            [12] 3234 	mov	a,#0x41
      000ED0 C0 E0            [24] 3235 	push	acc
      000ED2 85*41 82         [24] 3236 	mov	dpl,_fuel
      000ED5 85*42 83         [24] 3237 	mov	dph,(_fuel + 1)
      000ED8 85*43 F0         [24] 3238 	mov	b,(_fuel + 2)
      000EDB E5*44            [12] 3239 	mov	a,(_fuel + 3)
      000EDD 12r00r00         [24] 3240 	lcall	___fsdiv
      000EE0 AC 82            [24] 3241 	mov	r4,dpl
      000EE2 AD 83            [24] 3242 	mov	r5,dph
      000EE4 AE F0            [24] 3243 	mov	r6,b
      000EE6 FF               [12] 3244 	mov	r7,a
      000EE7 E5 81            [12] 3245 	mov	a,sp
      000EE9 24 FC            [12] 3246 	add	a,#0xfc
      000EEB F5 81            [12] 3247 	mov	sp,a
      000EED C0 04            [24] 3248 	push	ar4
      000EEF C0 05            [24] 3249 	push	ar5
      000EF1 C0 06            [24] 3250 	push	ar6
      000EF3 C0 07            [24] 3251 	push	ar7
      000EF5 90 00 00         [24] 3252 	mov	dptr,#0x0000
      000EF8 75 F0 C8         [24] 3253 	mov	b,#0xc8
      000EFB 74 42            [12] 3254 	mov	a,#0x42
      000EFD 12r00r00         [24] 3255 	lcall	___fsmul
      000F00 AC 82            [24] 3256 	mov	r4,dpl
      000F02 AD 83            [24] 3257 	mov	r5,dph
      000F04 AE F0            [24] 3258 	mov	r6,b
      000F06 FF               [12] 3259 	mov	r7,a
      000F07 E5 81            [12] 3260 	mov	a,sp
      000F09 24 FC            [12] 3261 	add	a,#0xfc
      000F0B F5 81            [12] 3262 	mov	sp,a
      000F0D 8C 82            [24] 3263 	mov	dpl,r4
      000F0F 8D 83            [24] 3264 	mov	dph,r5
      000F11 8E F0            [24] 3265 	mov	b,r6
      000F13 EF               [12] 3266 	mov	a,r7
      000F14 12r00r00         [24] 3267 	lcall	___fs2sint
                                   3268 ;	main.c:961: digit3_4 = int_input % 10;
      000F17 AE 82            [24] 3269 	mov	r6,dpl
      000F19 AF 83            [24] 3270 	mov	r7,dph
      000F1B 75*00 0A         [24] 3271 	mov	__moduint_PARM_2,#0x0a
      000F1E 75*01 00         [24] 3272 	mov	(__moduint_PARM_2 + 1),#0x00
      000F21 C0 07            [24] 3273 	push	ar7
      000F23 C0 06            [24] 3274 	push	ar6
      000F25 12r00r00         [24] 3275 	lcall	__moduint
      000F28 AC 82            [24] 3276 	mov	r4,dpl
      000F2A D0 06            [24] 3277 	pop	ar6
      000F2C D0 07            [24] 3278 	pop	ar7
      000F2E 8C*15            [24] 3279 	mov	_digit3_4,r4
                                   3280 ;	main.c:962: b = int_input / 10;
      000F30 75*00 0A         [24] 3281 	mov	__divuint_PARM_2,#0x0a
      000F33 75*01 00         [24] 3282 	mov	(__divuint_PARM_2 + 1),#0x00
      000F36 8E 82            [24] 3283 	mov	dpl,r6
      000F38 8F 83            [24] 3284 	mov	dph,r7
      000F3A 12r00r00         [24] 3285 	lcall	__divuint
                                   3286 ;	main.c:964: digit3_3 = b % 10;
      000F3D AE 82            [24] 3287 	mov	r6,dpl
      000F3F AF 83            [24] 3288 	mov	r7,dph
      000F41 75*00 0A         [24] 3289 	mov	__moduint_PARM_2,#0x0a
      000F44 75*01 00         [24] 3290 	mov	(__moduint_PARM_2 + 1),#0x00
      000F47 C0 07            [24] 3291 	push	ar7
      000F49 C0 06            [24] 3292 	push	ar6
      000F4B 12r00r00         [24] 3293 	lcall	__moduint
      000F4E AC 82            [24] 3294 	mov	r4,dpl
      000F50 D0 06            [24] 3295 	pop	ar6
      000F52 D0 07            [24] 3296 	pop	ar7
      000F54 8C*14            [24] 3297 	mov	_digit3_3,r4
                                   3298 ;	main.c:965: b = b / 10;
      000F56 75*00 0A         [24] 3299 	mov	__divuint_PARM_2,#0x0a
      000F59 75*01 00         [24] 3300 	mov	(__divuint_PARM_2 + 1),#0x00
      000F5C 8E 82            [24] 3301 	mov	dpl,r6
      000F5E 8F 83            [24] 3302 	mov	dph,r7
      000F60 12r00r00         [24] 3303 	lcall	__divuint
                                   3304 ;	main.c:967: digit3_2 = b % 10;
      000F63 AE 82            [24] 3305 	mov	r6,dpl
      000F65 AF 83            [24] 3306 	mov	r7,dph
      000F67 75*00 0A         [24] 3307 	mov	__moduint_PARM_2,#0x0a
      000F6A 75*01 00         [24] 3308 	mov	(__moduint_PARM_2 + 1),#0x00
      000F6D C0 07            [24] 3309 	push	ar7
      000F6F C0 06            [24] 3310 	push	ar6
      000F71 12r00r00         [24] 3311 	lcall	__moduint
      000F74 AC 82            [24] 3312 	mov	r4,dpl
      000F76 D0 06            [24] 3313 	pop	ar6
      000F78 D0 07            [24] 3314 	pop	ar7
      000F7A 8C*13            [24] 3315 	mov	_digit3_2,r4
                                   3316 ;	main.c:968: b = b / 10;
      000F7C 75*00 0A         [24] 3317 	mov	__divuint_PARM_2,#0x0a
      000F7F 75*01 00         [24] 3318 	mov	(__divuint_PARM_2 + 1),#0x00
      000F82 8E 82            [24] 3319 	mov	dpl,r6
      000F84 8F 83            [24] 3320 	mov	dph,r7
      000F86 12r00r00         [24] 3321 	lcall	__divuint
                                   3322 ;	main.c:970: digit3_1 = b % 10;
      000F89 75*00 0A         [24] 3323 	mov	__moduint_PARM_2,#0x0a
      000F8C 75*01 00         [24] 3324 	mov	(__moduint_PARM_2 + 1),#0x00
      000F8F 12r00r00         [24] 3325 	lcall	__moduint
      000F92 AE 82            [24] 3326 	mov	r6,dpl
      000F94 8E*12            [24] 3327 	mov	_digit3_1,r6
                                   3328 ;	main.c:971: }
      000F96 D0 D0            [24] 3329 	pop	psw
      000F98 D0 00            [24] 3330 	pop	(0+0)
      000F9A D0 01            [24] 3331 	pop	(0+1)
      000F9C D0 02            [24] 3332 	pop	(0+2)
      000F9E D0 03            [24] 3333 	pop	(0+3)
      000FA0 D0 04            [24] 3334 	pop	(0+4)
      000FA2 D0 05            [24] 3335 	pop	(0+5)
      000FA4 D0 06            [24] 3336 	pop	(0+6)
      000FA6 D0 07            [24] 3337 	pop	(0+7)
      000FA8 D0 83            [24] 3338 	pop	dph
      000FAA D0 82            [24] 3339 	pop	dpl
      000FAC D0 F0            [24] 3340 	pop	b
      000FAE D0 E0            [24] 3341 	pop	acc
      000FB0 D0*00            [24] 3342 	pop	bits
      000FB2 32               [24] 3343 	reti
                                   3344 ;------------------------------------------------------------
                                   3345 ;Allocation info for local variables in function 'PCA_isr'
                                   3346 ;------------------------------------------------------------
                                   3347 ;	main.c:974: void PCA_isr() __interrupt 7
                                   3348 ;	-----------------------------------------
                                   3349 ;	 function PCA_isr
                                   3350 ;	-----------------------------------------
      000FB3                       3351 _PCA_isr:
      000FB3 C0 E0            [24] 3352 	push	acc
      000FB5 C0 D0            [24] 3353 	push	psw
                                   3354 ;	main.c:977: CCF0 = 0;                       //Clear interrupt flag
                                   3355 ;	assignBit
      000FB7 C2 D8            [12] 3356 	clr	_CCF0
                                   3357 ;	main.c:978: CCAP0L = value;
      000FB9 85*19 EA         [24] 3358 	mov	_CCAP0L,_value
                                   3359 ;	main.c:979: CCAP0H = value >> 8;            //Update compare value
      000FBC 85*1A FA         [24] 3360 	mov	_CCAP0H,(_value + 1)
                                   3361 ;	main.c:980: value += T100Hz;
      000FBF 74 99            [12] 3362 	mov	a,#0x99
      000FC1 25*19            [12] 3363 	add	a,_value
      000FC3 F5*19            [12] 3364 	mov	_value,a
      000FC5 74 03            [12] 3365 	mov	a,#0x03
      000FC7 35*1A            [12] 3366 	addc	a,(_value + 1)
      000FC9 F5*1A            [12] 3367 	mov	(_value + 1),a
                                   3368 ;	main.c:981: cnt++;
      000FCB 05*1B            [12] 3369 	inc	_cnt
      000FCD E4               [12] 3370 	clr	a
      000FCE B5*1B 02         [24] 3371 	cjne	a,_cnt,00145$
      000FD1 05*1C            [12] 3372 	inc	(_cnt + 1)
      000FD3                       3373 00145$:
                                   3374 ;	main.c:983: if (cnt<300)
      000FD3 C3               [12] 3375 	clr	c
      000FD4 E5*1B            [12] 3376 	mov	a,_cnt
      000FD6 94 2C            [12] 3377 	subb	a,#0x2c
      000FD8 E5*1C            [12] 3378 	mov	a,(_cnt + 1)
      000FDA 94 01            [12] 3379 	subb	a,#0x01
      000FDC 50 04            [24] 3380 	jnc	00117$
                                   3381 ;	main.c:985: P4_6 = !P4_6;         //Flash once per second
      000FDE B2 C6            [12] 3382 	cpl	_P4_6
      000FE0 80 58            [24] 3383 	sjmp	00119$
      000FE2                       3384 00117$:
                                   3385 ;	main.c:987: else if (cnt<600)
      000FE2 C3               [12] 3386 	clr	c
      000FE3 E5*1B            [12] 3387 	mov	a,_cnt
      000FE5 94 58            [12] 3388 	subb	a,#0x58
      000FE7 E5*1C            [12] 3389 	mov	a,(_cnt + 1)
      000FE9 94 02            [12] 3390 	subb	a,#0x02
      000FEB 50 06            [24] 3391 	jnc	00114$
                                   3392 ;	main.c:989: P4_6 = P4_6;        
                                   3393 ;	assignBit
      000FED A2 C6            [12] 3394 	mov	c,_P4_6
      000FEF 92 C6            [24] 3395 	mov	_P4_6,c
      000FF1 80 47            [24] 3396 	sjmp	00119$
      000FF3                       3397 00114$:
                                   3398 ;	main.c:991: else if (cnt<900)
      000FF3 C3               [12] 3399 	clr	c
      000FF4 E5*1B            [12] 3400 	mov	a,_cnt
      000FF6 94 84            [12] 3401 	subb	a,#0x84
      000FF8 E5*1C            [12] 3402 	mov	a,(_cnt + 1)
      000FFA 94 03            [12] 3403 	subb	a,#0x03
      000FFC 50 04            [24] 3404 	jnc	00111$
                                   3405 ;	main.c:993: P4_6 = !P4_6;         //Flash once per second
      000FFE B2 C6            [12] 3406 	cpl	_P4_6
      001000 80 38            [24] 3407 	sjmp	00119$
      001002                       3408 00111$:
                                   3409 ;	main.c:995: else if (cnt<1200)
      001002 C3               [12] 3410 	clr	c
      001003 E5*1B            [12] 3411 	mov	a,_cnt
      001005 94 B0            [12] 3412 	subb	a,#0xb0
      001007 E5*1C            [12] 3413 	mov	a,(_cnt + 1)
      001009 94 04            [12] 3414 	subb	a,#0x04
      00100B 50 06            [24] 3415 	jnc	00108$
                                   3416 ;	main.c:997: P4_6 = P4_6;         
                                   3417 ;	assignBit
      00100D A2 C6            [12] 3418 	mov	c,_P4_6
      00100F 92 C6            [24] 3419 	mov	_P4_6,c
      001011 80 27            [24] 3420 	sjmp	00119$
      001013                       3421 00108$:
                                   3422 ;	main.c:999: else if (cnt<1500)
      001013 C3               [12] 3423 	clr	c
      001014 E5*1B            [12] 3424 	mov	a,_cnt
      001016 94 DC            [12] 3425 	subb	a,#0xdc
      001018 E5*1C            [12] 3426 	mov	a,(_cnt + 1)
      00101A 94 05            [12] 3427 	subb	a,#0x05
      00101C 50 04            [24] 3428 	jnc	00105$
                                   3429 ;	main.c:1001: P4_6 = !P4_6;         //Flash once per second
      00101E B2 C6            [12] 3430 	cpl	_P4_6
      001020 80 18            [24] 3431 	sjmp	00119$
      001022                       3432 00105$:
                                   3433 ;	main.c:1003: else if (cnt<1800)
      001022 C3               [12] 3434 	clr	c
      001023 E5*1B            [12] 3435 	mov	a,_cnt
      001025 94 08            [12] 3436 	subb	a,#0x08
      001027 E5*1C            [12] 3437 	mov	a,(_cnt + 1)
      001029 94 07            [12] 3438 	subb	a,#0x07
      00102B 50 06            [24] 3439 	jnc	00102$
                                   3440 ;	main.c:1005: P4_6 = P4_6;         
                                   3441 ;	assignBit
      00102D A2 C6            [12] 3442 	mov	c,_P4_6
      00102F 92 C6            [24] 3443 	mov	_P4_6,c
      001031 80 07            [24] 3444 	sjmp	00119$
      001033                       3445 00102$:
                                   3446 ;	main.c:1009: cnt = 0;
      001033 E4               [12] 3447 	clr	a
      001034 F5*1B            [12] 3448 	mov	_cnt,a
      001036 F5*1C            [12] 3449 	mov	(_cnt + 1),a
                                   3450 ;	main.c:1010: CR = 0;
                                   3451 ;	assignBit
      001038 C2 DE            [12] 3452 	clr	_CR
      00103A                       3453 00119$:
                                   3454 ;	main.c:1012: }
      00103A D0 D0            [24] 3455 	pop	psw
      00103C D0 E0            [24] 3456 	pop	acc
      00103E 32               [24] 3457 	reti
                                   3458 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3459 ;	eliminated unneeded push/pop dpl
                                   3460 ;	eliminated unneeded push/pop dph
                                   3461 ;	eliminated unneeded push/pop b
                                   3462 	.area CSEG    (CODE)
                                   3463 	.area CONST   (CODE)
      000000                       3464 _nums:
      000000 3F                    3465 	.db #0x3f	; 63
      000001 06                    3466 	.db #0x06	; 6
      000002 5B                    3467 	.db #0x5b	; 91
      000003 4F                    3468 	.db #0x4f	; 79	'O'
      000004 66                    3469 	.db #0x66	; 102	'f'
      000005 6D                    3470 	.db #0x6d	; 109	'm'
      000006 7D                    3471 	.db #0x7d	; 125
      000007 07                    3472 	.db #0x07	; 7
      000008 7F                    3473 	.db #0x7f	; 127
      000009 6F                    3474 	.db #0x6f	; 111	'o'
      00000A 00                    3475 	.db #0x00	; 0
      00000B 40                    3476 	.db #0x40	; 64
      00000C                       3477 _win:
      00000C 3E 59 6F 75 20 68 61  3478 	.ascii ">You have succcessfully landed on the surface of Mars, resea"
             76 65 20 73 75 63 63
             63 65 73 73 66 75 6C
             6C 79 20 6C 61 6E 64
             65 64 20 6F 6E 20 74
             68 65 20 73 75 72 66
             61 63 65 20 6F 66 20
             4D 61 72 73 2C 20 72
             65 73 65 61
      000048 72 63 68 20 77 69 6C  3479 	.ascii "rch will start imeadiately."
             6C 20 73 74 61 72 74
             20 69 6D 65 61 64 69
             61 74 65 6C 79 2E
      000063 00                    3480 	.db 0x00
      000064                       3481 _lose:
      000064 3E 59 6F 75 20 68 61  3482 	.ascii ">You have crashed on the surface of Mars. You are the lone s"
             76 65 20 63 72 61 73
             68 65 64 20 6F 6E 20
             74 68 65 20 73 75 72
             66 61 63 65 20 6F 66
             20 4D 61 72 73 2E 20
             59 6F 75 20 61 72 65
             20 74 68 65 20 6C 6F
             6E 65 20 73
      0000A0 75 72 76 69 76 6F 72  3483 	.ascii "urvivor of the module. Good luck."
             20 6F 66 20 74 68 65
             20 6D 6F 64 75 6C 65
             2E 20 47 6F 6F 64 20
             6C 75 63 6B 2E
      0000C1 00                    3484 	.db 0x00
      0000C2                       3485 _start1:
      0000C2 3E 5B 31 32 3A 34 33  3486 	.ascii ">[12:43PM Houston]: This is Houston, you have successfully d"
             50 4D 20 48 6F 75 73
             74 6F 6E 5D 3A 20 54
             68 69 73 20 69 73 20
             48 6F 75 73 74 6F 6E
             2C 20 79 6F 75 20 68
             61 76 65 20 73 75 63
             63 65 73 73 66 75 6C
             6C 79 20 64
      0000FE 65 74 61 63 68 65 64  3487 	.ascii "etached from Command Module. Over >[12:43PM You]: Copy that."
             20 66 72 6F 6D 20 43
             6F 6D 6D 61 6E 64 20
             4D 6F 64 75 6C 65 2E
             20 4F 76 65 72 20 3E
             5B 31 32 3A 34 33 50
             4D 20 59 6F 75 5D 3A
             20 43 6F 70 79 20 74
             68 61 74 2E
      00013A 20 41 77 61 69 74 69  3488 	.ascii " Awaiting manual engine control initiation. Over >[12:45PM Y"
             6E 67 20 6D 61 6E 75
             61 6C 20 65 6E 67 69
             6E 65 20 63 6F 6E 74
             72 6F 6C 20 69 6E 69
             74 69 61 74 69 6F 6E
             2E 20 4F 76 65 72 20
             3E 5B 31 32 3A 34 35
             50 4D 20 59
      000176 6F 75 5D 3A 20 43 6F  3489 	.ascii "ou]: Come in Houston, engine control to manual. Initiating l"
             6D 65 20 69 6E 20 48
             6F 75 73 74 6F 6E 2C
             20 65 6E 67 69 6E 65
             20 63 6F 6E 74 72 6F
             6C 20 74 6F 20 6D 61
             6E 75 61 6C 2E 20 49
             6E 69 74 69 61 74 69
             6E 67 20 6C
      0001B2 61 6E 64 69 6E 67 20  3490 	.ascii "anding procedure >[12:46PM Houston]: Statistic report on Lan"
             70 72 6F 63 65 64 75
             72 65 20 3E 5B 31 32
             3A 34 36 50 4D 20 48
             6F 75 73 74 6F 6E 5D
             3A 20 53 74 61 74 69
             73 74 69 63 20 72 65
             70 6F 72 74 20 6F 6E
             20 4C 61 6E
      0001EE 64 69 6E 67 20 4D 6F  3491 	.ascii "ding Module. Awaiting >[12:46PM You]:We have full control of"
             64 75 6C 65 2E 20 41
             77 61 69 74 69 6E 67
             20 3E 5B 31 32 3A 34
             36 50 4D 20 59 6F 75
             5D 3A 57 65 20 68 61
             76 65 20 66 75 6C 6C
             20 63 6F 6E 74 72 6F
             6C 20 6F 66
      00022A 20 74 68 65 20 6D 6F  3492 	.ascii " the module. Fuel is at 99%. Ship integrity is at 100%. Heig"
             64 75 6C 65 2E 20 46
             75 65 6C 20 69 73 20
             61 74 20 39 39 25 2E
             20 53 68 69 70 20 69
             6E 74 65 67 72 69 74
             79 20 69 73 20 61 74
             20 31 30 30 25 2E 20
             48 65 69 67
      000266 68 74 20 61 74 20 31  3493 	.ascii "ht at 1005 meters above the surface. Over >[12:47PM Houston]"
             30 30 35 20 6D 65 74
             65 72 73 20 61 62 6F
             76 65 20 74 68 65 20
             73 75 72 66 61 63 65
             2E 20 4F 76 65 72 20
             3E 5B 31 32 3A 34 37
             50 4D 20 48 6F 75 73
             74 6F 6E 5D
      0002A2 3A 20 43 6F 70 79 20  3494 	.ascii ": Copy that, you are go for landing. Good luck, this mission"
             74 68 61 74 2C 20 79
             6F 75 20 61 72 65 20
             67 6F 20 66 6F 72 20
             6C 61 6E 64 69 6E 67
             2E 20 47 6F 6F 64 20
             6C 75 63 6B 2C 20 74
             68 69 73 20 6D 69 73
             73 69 6F 6E
      0002DE 20 64 65 70 65 6E 64  3495 	.ascii " depends on you."
             73 20 6F 6E 20 79 6F
             75 2E
      0002EE 00                    3496 	.db 0x00
      0002EF                       3497 _engine1:
      0002EF 3E 5B 4D 6F 64 75 6C  3498 	.ascii ">[Module Intercom] Commander, our engines are overheating. T"
             65 20 49 6E 74 65 72
             63 6F 6D 5D 20 43 6F
             6D 6D 61 6E 64 65 72
             2C 20 6F 75 72 20 65
             6E 67 69 6E 65 73 20
             61 72 65 20 6F 76 65
             72 68 65 61 74 69 6E
             67 2E 20 54
      00032B 68 65 79 20 61 72 65  3499 	.ascii "hey are experiencing damage, engine thrust decreases by 10 p"
             20 65 78 70 65 72 69
             65 6E 63 69 6E 67 20
             64 61 6D 61 67 65 2C
             20 65 6E 67 69 6E 65
             20 74 68 72 75 73 74
             20 64 65 63 72 65 61
             73 65 73 20 62 79 20
             31 30 20 70
      000367 65 72 63 65 6E 74 2E  3500 	.ascii "ercent."
      00036E 00                    3501 	.db 0x00
      00036F                       3502 _turb1:
      00036F 3E 5B 48 6F 75 73 74  3503 	.ascii ">[Houston Misson Control]: Come in Artemis. We have detected"
             6F 6E 20 4D 69 73 73
             6F 6E 20 43 6F 6E 74
             72 6F 6C 5D 3A 20 43
             6F 6D 65 20 69 6E 20
             41 72 74 65 6D 69 73
             2E 20 57 65 20 68 61
             76 65 20 64 65 74 65
             63 74 65 64
      0003AB 20 61 20 6C 65 76 65  3504 	.ascii " a level 2 sandstorm heading west at 83 m/s. Estimated impac"
             6C 20 32 20 73 61 6E
             64 73 74 6F 72 6D 20
             68 65 61 64 69 6E 67
             20 77 65 73 74 20 61
             74 20 38 33 20 6D 2F
             73 2E 20 45 73 74 69
             6D 61 74 65 64 20 69
             6D 70 61 63
      0003E7 74 20 74 69 6D 65 20  3505 	.ascii "t time is unknown. Prepare imediately. I repeat prepare imed"
             69 73 20 75 6E 6B 6E
             6F 77 6E 2E 20 50 72
             65 70 61 72 65 20 69
             6D 65 64 69 61 74 65
             6C 79 2E 20 49 20 72
             65 70 65 61 74 20 70
             72 65 70 61 72 65 20
             69 6D 65 64
      000423 69 61 74 65 6C 79 21  3506 	.ascii "iately!"
      00042A 00                    3507 	.db 0x00
      00042B                       3508 _turb2:
      00042B 3E 5B 59 6F 75 5D 3A  3509 	.ascii ">[You]: Come in Houston. We have full impact, our accelerati"
             20 43 6F 6D 65 20 69
             6E 20 48 6F 75 73 74
             6F 6E 2E 20 57 65 20
             68 61 76 65 20 66 75
             6C 6C 20 69 6D 70 61
             63 74 2C 20 6F 75 72
             20 61 63 63 65 6C 65
             72 61 74 69
      000467 6F 6E 20 69 73 20 66  3510 	.ascii "on is fluctuating rapidily"
             6C 75 63 74 75 61 74
             69 6E 67 20 72 61 70
             69 64 69 6C 79
      000481 00                    3511 	.db 0x00
      000482                       3512 _turb3:
      000482 3E 5B 59 6F 75 5D 3A  3513 	.ascii ">[You]: Come in Houston. We are out of the sandstorm. There "
             20 43 6F 6D 65 20 69
             6E 20 48 6F 75 73 74
             6F 6E 2E 20 57 65 20
             61 72 65 20 6F 75 74
             20 6F 66 20 74 68 65
             20 73 61 6E 64 73 74
             6F 72 6D 2E 20 54 68
             65 72 65 20
      0004BE 73 65 65 6D 73 20 74  3514 	.ascii "seems to be only minor damages."
             6F 20 62 65 20 6F 6E
             6C 79 20 6D 69 6E 6F
             72 20 64 61 6D 61 67
             65 73 2E
      0004DD 00                    3515 	.db 0x00
      0004DE                       3516 _leak1:
      0004DE 3E 5B 4D 6F 64 75 6C  3517 	.ascii ">[Module Intercom] Commander, we have detected a fuel leak o"
             65 20 49 6E 74 65 72
             63 6F 6D 5D 20 43 6F
             6D 6D 61 6E 64 65 72
             2C 20 77 65 20 68 61
             76 65 20 64 65 74 65
             63 74 65 64 20 61 20
             66 75 65 6C 20 6C 65
             61 6B 20 6F
      00051A 6E 20 74 68 65 20 73  3518 	.ascii "n the side of the module. Fuel is decreasing rapidly. There "
             69 64 65 20 6F 66 20
             74 68 65 20 6D 6F 64
             75 6C 65 2E 20 46 75
             65 6C 20 69 73 20 64
             65 63 72 65 61 73 69
             6E 67 20 72 61 70 69
             64 6C 79 2E 20 54 68
             65 72 65 20
      000556 69 73 20 6E 6F 20 63  3519 	.ascii "is no current way of fixing it"
             75 72 72 65 6E 74 20
             77 61 79 20 6F 66 20
             66 69 78 69 6E 67 20
             69 74
      000574 00                    3520 	.db 0x00
      000575                       3521 _vel1:
      000575 3E 5B 4D 6F 64 75 6C  3522 	.ascii ">[Module Intercom] Commander, our velocity is too high. We a"
             65 20 49 6E 74 65 72
             63 6F 6D 5D 20 43 6F
             6D 6D 61 6E 64 65 72
             2C 20 6F 75 72 20 76
             65 6C 6F 63 69 74 79
             20 69 73 20 74 6F 6F
             20 68 69 67 68 2E 20
             57 65 20 61
      0005B1 72 65 20 65 78 70 65  3523 	.ascii "re experiencing damage to the module."
             72 69 65 6E 63 69 6E
             67 20 64 61 6D 61 67
             65 20 74 6F 20 74 68
             65 20 6D 6F 64 75 6C
             65 2E
      0005D6 00                    3524 	.db 0x00
      0005D7                       3525 _disp:
      0005D7 3E 5B 4D 6F 64 75 6C  3526 	.ascii ">[Module Intercom] Commander, our display circuitry is encon"
             65 20 49 6E 74 65 72
             63 6F 6D 5D 20 43 6F
             6D 6D 61 6E 64 65 72
             2C 20 6F 75 72 20 64
             69 73 70 6C 61 79 20
             63 69 72 63 75 69 74
             72 79 20 69 73 20 65
             6E 63 6F 6E
      000613 74 65 72 69 6E 67 20  3527 	.ascii "tering problems. The acceleration and fuel displays are brok"
             70 72 6F 62 6C 65 6D
             73 2E 20 54 68 65 20
             61 63 63 65 6C 65 72
             61 74 69 6F 6E 20 61
             6E 64 20 66 75 65 6C
             20 64 69 73 70 6C 61
             79 73 20 61 72 65 20
             62 72 6F 6B
      00064F 65 6E 2E              3528 	.ascii "en."
      000652 00                    3529 	.db 0x00
      000653                       3530 _ship_mass:
      000653 00 20 4B 46           3531 	.byte #0x00,#0x20,#0x4b,#0x46	;  1.300000e+04
      000657                       3532 ___str_0:
      000657 68 65 6C 6C 6F        3533 	.ascii "hello"
      00065C 00                    3534 	.db 0x00
      00065D                       3535 ___str_1:
      00065D 62 79 65 62 79 65     3536 	.ascii "byebye"
      000663 00                    3537 	.db 0x00
                                   3538 	.area XINIT   (CODE)
                                   3539 	.area CABS    (ABS,CODE)
